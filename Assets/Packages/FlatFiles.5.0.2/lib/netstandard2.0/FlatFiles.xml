<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlatFiles</name>
    </assembly>
    <members>
        <member name="T:FlatFiles.BooleanColumn">
            <summary>
            Represents a column containing boolean values.
            </summary>
        </member>
        <member name="M:FlatFiles.BooleanColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a BooleanColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.BooleanColumn.TrueString">
            <summary>
            Gets or sets the value representing true.
            </summary>
        </member>
        <member name="P:FlatFiles.BooleanColumn.FalseString">
            <summary>
            Gets or sets the value representing false.
            </summary>
        </member>
        <member name="M:FlatFiles.BooleanColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value into its equivilent boolean value.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>True if the value equals the TrueString; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.BooleanColumn.OnFormat(FlatFiles.IColumnContext,System.Boolean)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ByteArrayColumn">
            <summary>
            Represents a column of a byte[] values.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance instance of a ByteArrayColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.ByteArrayColumn.Encoding">
            <summary>
            Gets or sets the encoding to use when parsing the value.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value as a byte array.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed byte array.</returns>
        </member>
        <member name="M:FlatFiles.ByteArrayColumn.OnFormat(FlatFiles.IColumnContext,System.Byte[])">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ByteColumn">
            <summary>
            Represents a column of byte values.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ByteColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.ByteColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use to parse the value.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing the value.
            </summary>
        </member>
        <member name="P:FlatFiles.ByteColumn.OutputFormat">
            <summary>
            Gets or sets the formatting to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.ByteColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value into a byte.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed byte value.</returns>
        </member>
        <member name="M:FlatFiles.ByteColumn.OnFormat(FlatFiles.IColumnContext,System.Byte)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.CharArrayColumn">
            <summary>
            Represents a column of a char[] values.
            </summary>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance instance of a CharArrayColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.CharArrayColumn.Trim">
            <summary>
            Gets or sets whether the value should be trimmed.
            </summary>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value as a char array.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed char array.</returns>
        </member>
        <member name="P:FlatFiles.CharArrayColumn.IsTrimmed">
            <summary>
            Gets whether the value should be trimmed prior to parsing.
            </summary>
        </member>
        <member name="M:FlatFiles.CharArrayColumn.OnFormat(FlatFiles.IColumnContext,System.Char[])">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.CharColumn">
            <summary>
            Represents a column of character values.
            </summary>
        </member>
        <member name="M:FlatFiles.CharColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a CharColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.CharColumn.AllowTrailing">
            <summary>
            Gets or sets whether the parser should allow for trailing characters.
            </summary>
        </member>
        <member name="M:FlatFiles.CharColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value as a char.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed char.</returns>
        </member>
        <member name="M:FlatFiles.CharColumn.OnFormat(FlatFiles.IColumnContext,System.Char)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ColumnCollection">
            <summary>
            Holds the column definitions that make up a schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnCollection.#ctor">
            <summary>
            Initializes a new ColumnCollection.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnCollection.#ctor(FlatFiles.ColumnCollection)">
            <summary>
            Initializes a new ColumnCollection by copying another.
            </summary>
            <param name="other">The ColumnCollection to copy.</param>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column definition at the given index.
            </summary>
            <param name="index">The index of the column definition to get.</param>
            <returns>The column definition at the given index.</returns>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Item(System.String)">
            <summary>
            Gets the column definition with the given name.
            </summary>
            <param name="columnName">The name of the column to get the definition for.</param>
            <returns>The column definition with the given name.</returns>
        </member>
        <member name="P:FlatFiles.ColumnCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.IgnoredCount">
            <summary>
            Gets the number of columns that are ignored.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.MetadataCount">
            <summary>
            Gets the number of columns that are metadata.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnCollection.PhysicalCount">
            <summary>
            Gets the number of columns that are not ignored.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnCollection.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the column is not found.</returns>
        </member>
        <member name="M:FlatFiles.ColumnCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the column definitions in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:FlatFiles.ColumnDefinition">
            <summary>
            Defines a column that is part of a record schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ColumnDefinition.
            </summary>
            <param name="columnName">The name of the column to define.</param>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a ColumnDefinition.
            </summary>
            <param name="columnName">The name of the column to define.</param>
            <param name="isIgnored">Specifies whether the value in the column appears in the parsed record.</param>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.IsIgnored">
            <summary>
            Gets whether the value in this column is returned as a result.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.IsNullable">
            <summary>
            Gets or sets whether nulls are allowed for the column.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.IsComplex">
            <inheritdoc/>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.DefaultValue">
            <summary>
            Gets or sets the default value to use when a null is encountered on a non-nullable column.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.NullFormatter">
            <summary>
            Gets or sets the null formatter instance used to read/write null values.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.Preprocessor">
            <summary>
            Gets or sets a function used to preprocess input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.OnParsing">
            <summary>
            Gets or sets a function used to pre-process input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.OnParsed">
            <summary>
            Gets or sets a function used to post-process input after parsing it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.OnFormatting">
            <summary>
            Gets or sets a function used to pre-process output before trying to format it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.OnFormatted">
            <summary>
            Gets or sets a function used to post-process output after formatting it.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnDefinition.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.Parse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.TrimValue(System.String)">
            <summary>
            Removes any leading or trailing whitespace from the value.
            </summary>
            <param name="value">The value to trim.</param>
            <returns>The trimmed value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.Format(FlatFiles.IColumnContext,System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition.GetFormatProvider(FlatFiles.IColumnContext,System.IFormatProvider)">
            <summary>
            Gets the format provider to use. If the given provider is not null, it will be used.
            Otherwise, the format provider set on the options object will be used. As a last resort,
            the current culture specified by the operating system will be used.
            </summary>
            <param name="context">The current column context.</param>
            <param name="formatProvider">The format provider set on the column.</param>
            <returns>The format provider to use.</returns>
        </member>
        <member name="T:FlatFiles.ColumnDefinition`1">
            <summary>
            Represents the command base class for defining custom column definitions for a class.
            </summary>
            <typeparam name="T">The type of the column.</typeparam>
        </member>
        <member name="M:FlatFiles.ColumnDefinition`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ColumnDefinition.
            </summary>
            <param name="columnName">The name of the column to define.</param>
        </member>
        <member name="P:FlatFiles.ColumnDefinition`1.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition`1.Parse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="P:FlatFiles.ColumnDefinition`1.IsTrimmed">
            <summary>
            Gets whether the value should be trimmed prior to parsing.
            </summary>
        </member>
        <member name="M:FlatFiles.ColumnDefinition`1.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition`1.Format(FlatFiles.IColumnContext,System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:FlatFiles.ColumnDefinition`1.OnFormat(FlatFiles.IColumnContext,`0)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ColumnErrorEventArgs">
            <summary>
            Raised when a error occurs while reading or writing a column.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnErrorEventArgs.ColumnContext">
            <summary>
            Gets the schema that was being used to parse when the error occurred.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnErrorEventArgs.ColumnValue">
            <summary>
            Gets the value that was being parsed when the error occurred.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnErrorEventArgs.Exception">
            <summary>
            Gets the exception that was thrown.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnErrorEventArgs.IsHandled">
            <summary>
            Gets or sets whether the parser should attempt to continue parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnErrorEventArgs.Substitution">
            <summary>
            Gets or sets the replacement value to use when an error occurs.
            </summary>
            <remarks>
            When reading, the type of the substitution must match the type of the column.
            When writing, the type of the substitution must be a string.
            </remarks>
        </member>
        <member name="T:FlatFiles.ColumnProcessingException">
            <summary>
            Represents an error that was thrown while parsing a column value.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnProcessingException.ColumnContext">
            <summary>
            Gets the schema that was being used to parse when the error occurred.
            </summary>
        </member>
        <member name="P:FlatFiles.ColumnProcessingException.ColumnValue">
            <summary>
            Gets the value that was being parsed when the error occurred.
            </summary>
        </member>
        <member name="T:FlatFiles.ConversionColumn`2">
            <summary>
            Converts the values of a column to another type.
            </summary>
            <typeparam name="TSource">The type of the source column.</typeparam>
            <typeparam name="TDestination">The type to convert to.</typeparam>
        </member>
        <member name="P:FlatFiles.ConversionColumn`2.ColumnType">
            <inheritdoc />
        </member>
        <member name="M:FlatFiles.ConversionColumn`2.Parse(FlatFiles.IColumnContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlatFiles.ConversionColumn`2.Format(FlatFiles.IColumnContext,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlatFiles.DataRecordExtensions">
            <summary>
            Provides additional helper methods to the IDataRecord interface.
            </summary>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a Boolean -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Maps the value of the column to the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
            <remarks>This method attempts to generate the enumeration by its name (case-insensitive) or numeric value.</remarks>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.String)">
            <summary>
            Maps the value of the column to the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
            <remarks>This method attempts to generate the enumeration by its name (case-insensitive) or numeric value.</remarks>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableEnum``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Maps the value of the column to the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
            <remarks>This method attempts to generate the enumeration by its name (case-insensitive) or numeric value.</remarks>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableEnum``1(System.Data.IDataRecord,System.String)">
            <summary>
            Maps the value of the column to the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
            <remarks>This method attempts to generate the enumeration by its name (case-insensitive) or numeric value.</remarks>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetEnum``2(System.Data.IDataRecord,System.Int32,System.Func{``0,``1})">
            <summary>
            Maps the value of the column to an enumeration value.
            </summary>
            <typeparam name="T">The type of the column.</typeparam>
            <typeparam name="TEnum">The type of value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="mapper">A method that maps from the column's type to the desired type.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetEnum``2(System.Data.IDataRecord,System.String,System.Func{``0,``1})">
            <summary>
            Maps the value of the column to an enumeration value.
            </summary>
            <typeparam name="T">The type of the column.</typeparam>
            <typeparam name="TEnum">The type of value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <param name="mapper">A method that maps from the column's type to the desired type.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableEnum``2(System.Data.IDataRecord,System.Int32,System.Func{``0,System.Nullable{``1}})">
            <summary>
            Maps the value of the column to an enumeration value.
            </summary>
            <typeparam name="T">The type of the column.</typeparam>
            <typeparam name="TEnum">The type of value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="mapper">A method that maps from the column's type to the desired type.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableEnum``2(System.Data.IDataRecord,System.String,System.Func{``0,System.Nullable{``1}})">
            <summary>
            Maps the value of the column to an enumeration value.
            </summary>
            <typeparam name="T">The type of the column.</typeparam>
            <typeparam name="TEnum">The type of value to map to.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <param name="mapper">A method that maps from the column's type to the desired type.</param>
            <returns>The value of the column mapped to the enumeration value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableByte(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a byte -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a byte -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The character value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableChar(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a char -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a char -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetData(System.Data.IDataRecord,System.String)">
            <summary>
            Returns an System.Data.IDataReader for the specified column name.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>An System.Data.IDataReader.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetDataTypeName(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The data type information for the specified field.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the DateTime value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The DateTime value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetDateTimeOffset(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the DateTime value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The DateTime value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDateTimeOffset(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDateTimeOffset(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the decimal value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The decimal value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDecimal(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a decimal -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a decimal -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the double value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The double value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDouble(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a double -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a double -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetFieldType(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the field to find.</param>
            <returns>
            The System.Type information corresponding to the type of System.Object that
            would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the float value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The float value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableFloat(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a float -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a float -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the Guid value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The Guid value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableGuid(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a Guid -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a Guid -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the short value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The short value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a short -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a short -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the int value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The int value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a int -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a int -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the long value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The long value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt64(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a long -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a long -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetSByte(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the sbyte value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The sbyte value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableSByte(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a sbyte -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableSByte(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a sbyte -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the string value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The int value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableString(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a string -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a string -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetTimeSpan(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the DateTime value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The DateTime value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableTimeSpan(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableTimeSpan(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a DateTime -or- the specified default value if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- the default value if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetUInt16(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the ushort value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The ushort value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt16(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a ushort -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt16(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a ushort -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetUInt32(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the uint value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The uint value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt32(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a uint -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt32(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a uint -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetUInt64(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the ulong value of the specified column.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The ulong value of the specified column.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt64(FlatFiles.IFlatFileDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a ulong -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetNullableUInt64(FlatFiles.IFlatFileDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a ulong -or- null if the column is null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the column to find.</param>
            <returns>The value of the column -or- null if the column is null.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetValue(System.Data.IDataRecord,System.String)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The System.Object which will contain the field value upon return.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetValue``1(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>
            Returns the value of the specified field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the field to find.</param>
            <param name="provider">A format provider for converting to the desired type.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetValue``1(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>
            Returns the value of the specified field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="provider">A format provider for converting to the desired type.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Boolean)">
            <summary>
            Creates an array of objects with the column values of the current record.
            </summary>
            <param name="record">The IDataRecord to get the values for.</param>
            <param name="replaceDBNulls">Indicates whether DBNull instances should be replaced with nulls.</param>
            <returns>An array of objects with the column values of the current record.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Object[],System.Boolean)">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="record">The IDataRecord to get the values for.</param>
            <param name="values">The array to store the values in.</param>
            <param name="replaceDBNulls">Indicates whether DBNull instances should be replaced with nulls.</param>
            <returns>The number of objects copied to the array.</returns>
        </member>
        <member name="M:FlatFiles.DataRecordExtensions.IsDBNull(System.Data.IDataRecord,System.String)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="record">The IDataRecord to get the value for.</param>
            <param name="name">The name of the field to find.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="T:FlatFiles.DataTableExtensions">
            <summary>
            Provides extensions methods for populating a DataTable using flat files.
            </summary>
        </member>
        <member name="M:FlatFiles.DataTableExtensions.ReadFlatFile(System.Data.DataTable,FlatFiles.IReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
            <summary>
            Loads the contents returned by the given reader into the DataTable.
            </summary>
            <param name="table">The table to load the file contents into.</param>
            <param name="reader">The reader to use to extract the file schema and data.</param>
            <param name="loadOption">Controls how values from the flat file will be applied to existing rows.</param>
            <param name="errorHandler">A <see cref="T:System.Data.FillErrorEventHandler"/> delegate to call when an error occurs while loading data.</param>
            <exception cref="T:System.ArgumentNullException">The table is null.</exception>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
        </member>
        <member name="M:FlatFiles.DataTableExtensions.WriteFlatFile(System.Data.DataTable,FlatFiles.IWriter)">
            <summary>
            Writes the data table contents to the writer.
            </summary>
            <param name="table">The table whose contents to write to the writer.</param>
            <param name="writer">The writer to write the values to.</param>
            <exception cref="T:System.ArgumentNullException">The table is null.</exception>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
        </member>
        <member name="T:FlatFiles.DateTimeColumn">
            <summary>
            Represents a column of DateTime values.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a DateTimeColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.InputFormat">
            <summary>
            Gets or sets the format string to use when parsing the date and time.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing the date and time.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns a DateTime instance.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed DateTime instance.</returns>
        </member>
        <member name="M:FlatFiles.DateTimeColumn.OnFormat(FlatFiles.IColumnContext,System.DateTime)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.DateTimeOffsetColumn">
            <summary>
            Represents a column of DateTime values.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeOffsetColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a DateTimeOffsetColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DateTimeOffsetColumn.InputFormat">
            <summary>
            Gets or sets the format string to use when parsing the date and time.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeOffsetColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="P:FlatFiles.DateTimeOffsetColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing the date and time.
            </summary>
        </member>
        <member name="M:FlatFiles.DateTimeOffsetColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlatFiles.DateTimeOffsetColumn.OnFormat(FlatFiles.IColumnContext,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="T:FlatFiles.DecimalColumn">
            <summary>
            Represents a column containing decimals.
            </summary>
        </member>
        <member name="M:FlatFiles.DecimalColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an DecimalColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DecimalColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DecimalColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DecimalColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.DecimalColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning a Decimal.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Decimal.</returns>
        </member>
        <member name="M:FlatFiles.DecimalColumn.OnFormat(FlatFiles.IColumnContext,System.Decimal)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.DefaultValue">
            <summary>
            Generates a default value whenever a null is encountered on a non-nullable column.
            </summary>
        </member>
        <member name="M:FlatFiles.DefaultValue.Use(System.Object)">
            <summary>
            Use the given value as a default.
            </summary>
            <param name="value">The value to use as a default.</param>
            <returns>An instance of a <see cref="T:FlatFiles.IDefaultValue"/> that returns the given value.</returns>
        </member>
        <member name="M:FlatFiles.DefaultValue.Use(System.Func{FlatFiles.IColumnContext,System.Object})">
            <summary>
            Use the given delegate to generate the default value.
            </summary>
            <param name="factory">The value to use as a default.</param>
            <returns>An instance of a <see cref="T:FlatFiles.IDefaultValue"/> that returns the result of the delegate.</returns>
        </member>
        <member name="M:FlatFiles.DefaultValue.Disabled">
            <summary>
            Throw an exception when an unexpected null is encountered.
            </summary>
            <returns>An instance of a <see cref="T:FlatFiles.IDefaultValue"/> that throws an exception.</returns>
        </member>
        <member name="M:FlatFiles.DefaultValue.GetDefaultValue(FlatFiles.IColumnContext)">
            <summary>
            Gets the default value to use when a null is encountered on a non-nullable column.
            </summary>
            <param name="context">The current column context.</param>
            <returns>The default value.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedComplexColumn">
            <inheritdoc />
            <summary>
            Represents a string column that has contains multiple, nested values
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedComplexColumn.#ctor(System.String,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedComplexColumn with no schema.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="M:FlatFiles.DelimitedComplexColumn.#ctor(System.String,FlatFiles.DelimitedSchema,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedComplexColumn with the given schema and options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="P:FlatFiles.DelimitedComplexColumn.Options">
            <summary>
            Gets or sets the delimited options.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedComplexColumn.IsComplex">
            <inheritdoc/>
        </member>
        <member name="P:FlatFiles.DelimitedComplexColumn.IsTrimmed">
            <inheritdoc/>
        </member>
        <member name="M:FlatFiles.DelimitedComplexColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Extracts a single record from the embedded data.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value containing the embedded data.</param>
            <returns>
            An object array containing the values read from the embedded data -or- null if there is no embedded data.
            </returns>
        </member>
        <member name="M:FlatFiles.DelimitedComplexColumn.OnFormat(FlatFiles.IColumnContext,System.Object[])">
            <summary>
            Formats the given object array into an embedded record.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="values">The object array containing the values of the embedded record.</param>
            <returns>A formatted string containing the embedded data.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedOptions">
            <inheritdoc />
            <summary>
            Holds configuration options for the DelimitedParser.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedOptions.#ctor">
            <summary>
            Initializes a new instance of a DelimitedParserOptions.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.Separator">
            <summary>
            Gets or sets the character or characters used to separate the columns.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.RecordSeparator">
            <summary>
            Gets or sets the character or characters used to separate the records.
            </summary>
            <remarks>
            By default, FlatFiles will look a combination of /r, /n, or /r/n. Setting
            the record separator to null will enable this default behavior. When writing,
            FlatFiles will use Environment.NewLine as the default record separator.
            </remarks>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.Quote">
            <summary>
            Gets or sets the character used to quote records containing special characters.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.QuoteBehavior">
            <summary>
            Gets or sets how FlatFiles will handle quoting values.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.IsFirstRecordSchema">
            <summary>
            Gets or sets whether the first record is the schema.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.PreserveWhiteSpace">
            <summary>
            Gets or sets whether leading and trailing whitespace should be preserved when reading.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.IsColumnContextDisabled">
            <summary>
            Gets whether column-level metadata should be disabled for non-metadata columns.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedOptions.FormatProvider">
            <summary>
            Gets or sets the global, default format provider.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedOptions.Clone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The new options.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedReader">
            <inheritdoc />
            <summary>
            Extracts records from a file containing delimited values.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedReader.#ctor(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedReader with no schema.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedReader.#ctor(System.IO.TextReader,FlatFiles.DelimitedSchema,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedReader with the given schema.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="schema">The schema of the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedReader.#ctor(System.IO.TextReader,FlatFiles.DelimitedSchemaSelector,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedReader with the given schema.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="schemaSelector">The schema selector configured to determine the schema dynamically.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema selector is null.</exception>
        </member>
        <member name="E:FlatFiles.DelimitedReader.RecordRead">
            <summary>
            Raised when a record is read but before its columns are parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.DelimitedReader.RecordParsed">
            <summary>
            Raised when a record is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.DelimitedReader.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="E:FlatFiles.DelimitedReader.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedReader.GetSchema">
            <summary>
            Gets the schema being used by the parser. If a 
            SchemaSelector was provided, null will be returned.
            If no schema was specified and no schema exists in
            the file, null will be returned.
            </summary>
            <returns>The names.</returns>
        </member>
        <member name="M:FlatFiles.DelimitedReader.GetSchemaAsync">
            <summary>
            Gets the schema being used by the parser.If a 
            SchemaSelector was provided, null will be returned.
            If no schema was specified and no schema exists in
            the file, null will be returned.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.DelimitedReader.Read">
            <summary>
            Attempts to read the next record from the stream.
            </summary>
            <returns>True if the next record was read or false if all records have been read.</returns>
        </member>
        <member name="M:FlatFiles.DelimitedReader.ReadAsync">
            <inheritdoc />
            <summary>
            Attempts to read the next record from the stream.
            </summary>
            <returns>True if the next record was read or false if all records have been read.</returns>
        </member>
        <member name="M:FlatFiles.DelimitedReader.Skip">
            <summary>
            Attempts to skip the next record from the stream.
            </summary>
            <returns>True if the next record was skipped or false if all records have been read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedReader.SkipAsync">
            <inheritdoc />
            <summary>
            Attempts to skip the next record from the stream.
            </summary>
            <returns>True if the next record was skipped or false if all records have been read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedReader.GetValues">
            <summary>
            Gets the values for the current record.
            </summary>
            <returns>The values of the current record.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedRecordParsedEventArgs">
            <inheritdoc />
            <summary>
            Holds the information related to a parsed delimited record.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedRecordParsedEventArgs.#ctor(FlatFiles.IRecordContext,System.Object[])">
            <inheritdoc />
            <summary>
            Creates a new instance of a DelimitedRecordParsedEventArgs.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedRecordParsedEventArgs.RecordContext">
            <summary>
            Gets any metadata associated with the current read process.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedRecordParsedEventArgs.Values">
            <summary>
            Gets the parsed record values read from the source file.
            </summary>
        </member>
        <member name="T:FlatFiles.DelimitedRecordReadEventArgs">
            <inheritdoc />
            <summary>
            Holds the information related to an unparsed delimited record.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedRecordReadEventArgs.#ctor(FlatFiles.IRecordContext,System.String[])">
            <inheritdoc />
            <summary>
            Creates a new instance of a DelimitedRecordReadEventArgs.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedRecordReadEventArgs.RecordContext">
            <summary>
            Gets any metadata associated with the current read process.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedRecordReadEventArgs.Values">
            <summary>
            Gets the unparsed record values read from the source file.
            </summary>
        </member>
        <member name="P:FlatFiles.DelimitedRecordReadEventArgs.IsSkipped">
            <summary>
            Gets or sets whether the record should be skipped.
            </summary>
        </member>
        <member name="T:FlatFiles.DelimitedSchema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchema.#ctor">
            <summary>
            Initializes a new instance of a Schema.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchema.AddColumn(FlatFiles.IColumnDefinition)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <returns>The current schema.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedSchemaInjector">
            <summary>
            Represents a class that can dynamically provide the schema based on the shape of the data being written.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaInjector.#ctor">
            <summary>
            Initializes a new instance of a DelimitedSchemaInjector.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaInjector.When(System.Func{System.Object[],System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaInjector.WithDefault(FlatFiles.DelimitedSchema)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="schema">The default schema to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedSchemaSelector">
            <summary>
            Represents a class that can dynamically provide the schema based on the shape of a read record.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaSelector.#ctor">
            <summary>
            Initializes a new instance of a DelimitedSchemaSelector.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaSelector.When(System.Func{System.String[],System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedSchemaSelector.WithDefault(FlatFiles.DelimitedSchema)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="schema">The default schema to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="T:FlatFiles.DelimitedSyntaxException">
            <summary>
            Represents an error that occurred while parsing a delimited stream.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedSyntaxException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of a DelimitedSyntaxException.
            </summary>
            <param name="message">The details of the syntax error.</param>
        </member>
        <member name="T:FlatFiles.DelimitedWriter">
            <summary>
            Builds textual representations of data by separating fields with a delimiter.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.#ctor(System.IO.TextWriter,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedWriter without a schema.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.#ctor(System.IO.TextWriter,FlatFiles.DelimitedSchema,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedWriter with the given schema.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="schema">The schema of the delimited document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.#ctor(System.IO.TextWriter,FlatFiles.DelimitedSchemaInjector,FlatFiles.DelimitedOptions)">
            <summary>
            Initializes a new DelimitedWriter with the given schema.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="injector">The schema injector to use to determine the schema.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema injector is null.</exception>
        </member>
        <member name="E:FlatFiles.DelimitedWriter.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.DelimitedWriter.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.GetSchema">
            <summary>
            Gets the schema used to build the output.
            </summary>
            <returns>The schema used to build the output.</returns>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.WriteSchema">
            <summary>
            Write the textual representation of the record schema.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.WriteSchemaAsync">
            <summary>
            Write the textual representation of the record schema to the writer.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.WriteAsync(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.WriteRaw(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a newline should be written after the data.</param>
        </member>
        <member name="M:FlatFiles.DelimitedWriter.WriteRawAsync(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a record separator should be written after the data.</param>
        </member>
        <member name="T:FlatFiles.DoubleColumn">
            <summary>
            Represents a column containing doubles.
            </summary>
        </member>
        <member name="M:FlatFiles.DoubleColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an DoubleColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.DoubleColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DoubleColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.DoubleColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.DoubleColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning a Double.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Double.</returns>
        </member>
        <member name="M:FlatFiles.DoubleColumn.OnFormat(FlatFiles.IColumnContext,System.Double)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.EnumColumn`1">
            <summary>
            Represents a column containing enumeration values.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.#ctor(System.String)">
            <summary>
            Initializes a new EnumColumn with the given name.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.EnumColumn`1.Parser">
            <summary>
            Gets or sets the parser used to convert string values into enumeration values.
            </summary>
        </member>
        <member name="P:FlatFiles.EnumColumn`1.Formatter">
            <summary>
            Gets or sets the formatter used to convert enumeration values to string values.
            </summary>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value into its equivalent enum value.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The enum value that was parsed.</returns>
        </member>
        <member name="M:FlatFiles.EnumColumn`1.OnFormat(FlatFiles.IColumnContext,`0)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.FixedAlignment">
            <summary>
            Gets the alignment of a fixed width column.
            </summary>
        </member>
        <member name="F:FlatFiles.FixedAlignment.LeftAligned">
            <summary>
            The content in the column is left aligned.
            </summary>
        </member>
        <member name="F:FlatFiles.FixedAlignment.RightAligned">
            <summary>
            The content in the column is right aligned.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthComplexColumn">
            <summary>
            Represents a string column that has contains multiple, nested values
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.#ctor(System.String,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthComplexColumn with the given schema and options.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="schema">The schema of the data embedded in the column.</param>
            <param name="options">The options to use when parsing the embedded data.</param>
        </member>
        <member name="P:FlatFiles.FixedLengthComplexColumn.Options">
            <summary>
            Gets or sets the options used to read/write the records.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthComplexColumn.IsTrimmed">
            <inheritdoc/>
        </member>
        <member name="P:FlatFiles.FixedLengthComplexColumn.IsComplex">
            <inheritdoc/>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Extracts a single record from the embedded data.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value containing the embedded data.</param>
            <returns>
            An object array containing the values read from the embedded data -or- null if there is no embedded data.
            </returns>
        </member>
        <member name="M:FlatFiles.FixedLengthComplexColumn.OnFormat(FlatFiles.IColumnContext,System.Object[])">
            <summary>
            Formats the given object array into an embedded record.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="values">The object array containing the values of the embedded record.</param>
            <returns>A formatted string containing the embedded data.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthOptions">
            <summary>
            Holds configuration settings for the FixedLengthParser class.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthOptions.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthParserOptions.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.FillCharacter">
            <summary>
            Gets or sets the character used to buffer values in a column.
            </summary>
            <remarks>The fill character can be controlled at the column level using the Window class.</remarks>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.HasRecordSeparator">
            <summary>
            Gets or sets whether a separator is present between records.
            </summary>
            <remarks>
            By default, FlatFiles assumes records are separated by a newline. If set to false,
            FlatFiles will attempt to start reading the next record immediately after the end of
            the previous record.
            </remarks>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.RecordSeparator">
            <summary>
            Gets or sets the string that indicates the end of a record.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.IsFirstRecordHeader">
            <summary>
            Gets or sets whether the first record in the source holds header information and should be skipped.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.FlatFiles#IOptions#IsFirstRecordSchema">
            <summary>
            Gets whether the first record in the source holds header information and should be skipped.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.Alignment">
            <summary>
            Gets or sets the default alignment for the values in the fixed length file.
            </summary>
            <remarks>The alignment can be controlled at the columnm level using the Window class.</remarks>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.TruncationPolicy">
            <summary>
            Gets or sets the default overflow truncation policy to use when a value exceeds the maximum length of its column.
            </summary>
            <remarks>The trunaction policy can be controlled at the column level using the Window class.</remarks>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.IsColumnContextDisabled">
            <summary>
            Gets or sets whether column-level metadata should be disabled for non-metadata columns.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthOptions.FormatProvider">
            <summary>
            Gets or sets the global, default format provider.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthOptions.Clone">
            <summary>
            Duplicates the options.
            </summary>
            <returns>The new options.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthReader">
            <summary>
            Extracts records from a file that has value in fixed-length columns.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.#ctor(System.IO.TextReader,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthReader with the given schema.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="schema">The schema of the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.#ctor(System.IO.TextReader,FlatFiles.FixedLengthSchemaSelector,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthReader with the given schema.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="schemaSelector">The schema selector configured to determine the schema dynamically.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <exception cref="T:System.ArgumentNullException">The reader is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema selector is null.</exception>
        </member>
        <member name="E:FlatFiles.FixedLengthReader.RecordRead">
            <summary>
            Raised when a record is read from the source file, before it is partitioned.
            </summary>
        </member>
        <member name="E:FlatFiles.FixedLengthReader.RecordPartitioned">
            <summary>
            Raised after a record is partitioned, before it is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.FixedLengthReader.RecordParsed">
            <summary>
            Raised after a record is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.FixedLengthReader.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="E:FlatFiles.FixedLengthReader.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.GetSchema">
            <summary>
            Gets the schema being used by the parser.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.GetSchemaAsync">
            <summary>
            Gets the schema being used by the parser.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was parsed; otherwise, false if all files are read.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.ReadAsync">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was parsed; otherwise, false if all files are read.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if all records are read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.SkipAsync">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if all records are read.</returns>
            <remarks>The previously parsed values remain available.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthReader.GetValues">
            <summary>
            Gets the values for the current record.
            </summary>
            <returns>The values of the current record.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthRecordParsedEventArgs">
            <summary>
            Holds the information related to a parsed fixed length record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthRecordParsedEventArgs.#ctor(FlatFiles.IRecordContext,System.Object[])">
            <summary>
            Creates a new instance of a FixedLengthRecordParsedEventArgs.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordParsedEventArgs.RecordContext">
            <summary>
            Gets any metadata associated with the current read process.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordParsedEventArgs.Values">
            <summary>
            Gets the parsed record values read from the source file.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthRecordPartitionedEventArgs">
            <summary>
            Holds the information related to a partitioned, unparsed fixed length record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthRecordPartitionedEventArgs.#ctor(FlatFiles.IRecordContext,System.String[])">
            <summary>
            Creates a new instance of a FixedLengthRecordPartitionedEventArgs.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordPartitionedEventArgs.RecordContext">
            <summary>
            Gets any metadata associated with the current read process.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordPartitionedEventArgs.Values">
            <summary>
            Gets the partitioned, unparsed record values read from the source file.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordPartitionedEventArgs.IsSkipped">
            <summary>
            Gets or sets whether the record should be skipped.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthRecordReadEventArgs">
            <summary>
            Holds the information related to an unpartitioned, unparsed fixed length record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthRecordReadEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of a FixedLengthRecordReadEventArgs.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordReadEventArgs.Record">
            <summary>
            Gets the unpartitioned, unparsed record values read from the source file.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthRecordReadEventArgs.IsSkipped">
            <summary>
            Gets or sets whether the record should be skipped.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthSchema">
            <summary>
            Defines the expected format of a fixed-length file record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthSchema.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchema.AddColumn(FlatFiles.IColumnDefinition,FlatFiles.Window)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <param name="window">Describes the column</param>
            <returns>The current schema.</returns>
        </member>
        <member name="P:FlatFiles.FixedLengthSchema.ColumnDefinitions">
            <inheritdoc />
        </member>
        <member name="P:FlatFiles.FixedLengthSchema.Windows">
            <summary>
            Gets the column widths.
            </summary>
        </member>
        <member name="P:FlatFiles.FixedLengthSchema.TotalWidth">
            <summary>
            Gets the total width of all columns.
            </summary>
        </member>
        <member name="T:FlatFiles.FixedLengthSchemaInjector">
            <summary>
            Represents a class that can dynamically provide the schema based on the shape of the data being written.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchemaInjector.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthSchemaInjector.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchemaInjector.When(System.Func{System.Object[],System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthSchemaInjector.WithDefault(FlatFiles.FixedLengthSchema)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="schema">The default schema to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthSchemaSelector">
            <summary>
            Represents a class that can dynamically provide the schema based on the shape of a read record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthSchemaSelector.When(System.Func{System.String,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthSchemaSelector.WithDefault(FlatFiles.FixedLengthSchema)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="schema">The default schema to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="T:FlatFiles.FixedLengthWriter">
            <summary>
            Builds textual representations of data by giving each field a fixed width.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.#ctor(System.IO.TextWriter,FlatFiles.FixedLengthSchema,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthBuilder with the given schema.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="schema">The schema of the fixed-length document.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.#ctor(System.IO.TextWriter,FlatFiles.FixedLengthSchemaInjector,FlatFiles.FixedLengthOptions)">
            <summary>
            Initializes a new FixedLengthBuilder with the given schema.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="injector">The schema injector to use to determine the schema.</param>
            <param name="options">The options used to format the output.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The schema injector is null.</exception>
        </member>
        <member name="E:FlatFiles.FixedLengthWriter.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.FixedLengthWriter.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.GetSchema">
            <summary>
            Gets the schema used to build the output.
            </summary>
            <returns>The schema used to build the output.</returns>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.WriteSchema">
            <summary>
            Write the textual representation of the record schema to the writer.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.WriteSchemaAsync">
            <summary>
            Write the textual representation of the record schema to the writer.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.WriteAsync(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <exception cref="T:System.ArgumentNullException">The values array is null.</exception>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.WriteRaw(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a newline should be written after the data.</param>
        </member>
        <member name="M:FlatFiles.FixedLengthWriter.WriteRawAsync(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a record separator should be written after the data.</param>
        </member>
        <member name="T:FlatFiles.FlatFileDataReader">
            <summary>
            Provides an ADO.NET adapter (IDataReader) for a flat file reader.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.#ctor(FlatFiles.IReader,FlatFiles.FlatFileDataReaderOptions)">
            <summary>
            Initializes a new instance of a FlatFileParser.
            </summary>
            <param name="reader">The reader to use to parse the underlying file.</param>
            <param name="options">The options to use to control how the file is read.</param>
            <exception cref="T:System.ArgumentNullException">The parser is null.</exception>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.Reader">
            <summary>
            Gets the underlying FlatFile reader.
            </summary>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.Options">
            <summary>
            Gets the data reader options.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.Finalize">
            <summary>
            Finalizes the FlatFileReader.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.Dispose">
            <summary>
            Releases any resources being held by the reader.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.Close">
            <summary>
            Closes the underlying record set.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetSchemaTable">
            <summary>
            Gets a DataTable containing the schema of the data.
            </summary>
            <returns>The Schema DataTable.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.IsClosed">
            <summary>
            Gets whether the underlying data source is closed.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.Read">
            <summary>
            Advances the reader to the next record.
            </summary>
            <returns>True if there was another record; otherwise, false.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.FieldCount">
            <summary>
            Gets the number of fields in the current record.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The boolean value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetByte(System.Int32)">
            <summary>
            Gets the byte value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The byte value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the bytes from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <param name="fieldOffset">The offset into the byte array to start copying.</param>
            <param name="buffer">An array to copy the bytes to.</param>
            <param name="bufferoffset">The offset into the given buffer to start copying.</param>
            <param name="length">The maximum number of items to copy into the given buffer.</param>
            <returns>The number of bytes copied to the buffer.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetChar(System.Int32)">
            <summary>
            Gets the char value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The char value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the chars from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <param name="fieldoffset">The offset into the char array to start copying.</param>
            <param name="buffer">An array to copy the chars to.</param>
            <param name="bufferoffset">The offset into the given buffer to start copying.</param>
            <param name="length">The maximum number of items to copy into the given buffer.</param>
            <returns>The number of chars copied to the buffer.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the type name of the value of the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The type name.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The DateTime value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetDateTimeOffset(System.Int32)">
            <summary>
            Gets the DateTime value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The DateTime value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The decimal value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The double value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The type of the value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the float value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The float value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the GUID from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The GUID at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the short value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The short value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the int value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The int value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the long value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The long value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column at the given index.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="name">The name of the column..</param>
            <returns>The index of the column with the given name.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetSByte(System.Int32)">
            <summary>
            Gets the sbyte value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The sbyte value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetString(System.Int32)">
            <summary>
            Gets the string from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The string at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The string at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetUInt16(System.Int32)">
            <summary>
            Gets the unsigned short value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned short value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetUInt32(System.Int32)">
            <summary>
            Gets the unsigned int value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned int value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetUInt64(System.Int32)">
            <summary>
            Gets the unsigned long value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned long value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value as an object from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The value as an object at the given index.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.GetValues(System.Object[])">
            <summary>
            Copies the values from the current record to the given array.
            </summary>
            <param name="values">The array to copy the values to.</param>
            <returns>The number of values copied to the given array.</returns>
        </member>
        <member name="M:FlatFiles.FlatFileDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets whether the value at given index is null for the current record.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>True if the value is null; otherwise, false.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.Item(System.String)">
            <summary>
            Gets the value from the current record in the column with the given name.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value in the column with the given name.</returns>
        </member>
        <member name="P:FlatFiles.FlatFileDataReader.Item(System.Int32)">
            <summary>
            Gets the value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="T:FlatFiles.FlatFileDataReaderOptions">
            <summary>
            Holds configuration settings for the FlatFileDataReader class.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileDataReaderOptions.#ctor">
            <summary>
            Initializes a new instance of FlatFileDataReaderOptions.
            </summary>
        </member>
        <member name="P:FlatFiles.FlatFileDataReaderOptions.IsDBNullReturned">
            <summary>
            Gets or sets whether <see cref="T:System.DBNull"/> should be returned instead of null.
            </summary>
        </member>
        <member name="P:FlatFiles.FlatFileDataReaderOptions.IsNullStringAllowed">
            <summary>
            Gets or sets whether an <see cref="T:System.InvalidCastException" /> should be thrown if 
            <see cref="M:FlatFiles.FlatFileDataReader.GetString(System.Int32)" /> is called when the value is null.
            </summary>
        </member>
        <member name="T:FlatFiles.FlatFileException">
            <summary>
            Represents an error that occurred while parsing a stream.
            </summary>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a FlatFileException, recording which record caused the error.
            </summary>
            <param name="message">A message describing the cause of the error.</param>
        </member>
        <member name="M:FlatFiles.FlatFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of a FlatFileException.
            </summary>
            <param name="message">A message describing the cause of the error.</param>
            <param name="innerException">An inner exception containing the cause of the underlying error.</param>
        </member>
        <member name="T:FlatFiles.GuidColumn">
            <summary>
            Represents a column of Guid values.
            </summary>
        </member>
        <member name="M:FlatFiles.GuidColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a GuidColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.GuidColumn.InputFormat">
            <summary>
            Gets or sets the format string to use when parsing the Guid.
            </summary>
        </member>
        <member name="P:FlatFiles.GuidColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.GuidColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns a Guid instance.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Guid.</returns>
        </member>
        <member name="M:FlatFiles.GuidColumn.OnFormat(FlatFiles.IColumnContext,System.Guid)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.ICharPropertyMapping">
            <summary>
            Represents the mapping from a type property to a char column.
            </summary>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.AllowTrailing(System.Boolean)">
            <summary>
            Sets whether the parser should ignore extra characters.
            </summary>
            <param name="allow">True if the parser should ignore extra characters -or- false, if an error should occur.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.ICharPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.IColumnContext">
            <summary>
            Holds information about the column currently being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnContext.RecordContext">
            <summary>
            Gets information about the record currently being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnContext.ColumnDefinition">
            <summary>
            Gets the definition for the current column.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnContext.PhysicalIndex">
            <summary>
            Gets the physical index into the underlying file.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnContext.LogicalIndex">
            <summary>
            Gets the logical index into the underlying file, excluding ignored columns.
            </summary>
        </member>
        <member name="T:FlatFiles.IColumnDefinition">
            <summary>
            Defines a column that is part of a record schema.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.IsIgnored">
            <summary>
            Gets whether the value in this column is returned as a result.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.IsNullable">
            <summary>
            Gets whether nulls are allowed for the column.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.IsComplex">
            <summary>
            Gets whether the column contains a nested object structure.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.DefaultValue">
            <summary>
            Gets or sets the default value to use when a null is encountered on a non-nullable column.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.NullFormatter">
            <summary>
            Gets or sets the null formatter instance used to read/write null values.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.Preprocessor">
            <summary>
            Gets or sets a function used to preprocess input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.OnParsing">
            <summary>
            Gets or sets a function used to pre-process input before trying to parse it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.OnParsed">
            <summary>
            Gets or sets a function used to post-process input after parsing it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.OnFormatting">
            <summary>
            Gets or sets a function used to pre-process output before trying to format it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.OnFormatted">
            <summary>
            Gets or sets a function used to post-process output after formatting it.
            </summary>
        </member>
        <member name="P:FlatFiles.IColumnDefinition.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.IColumnDefinition.Parse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.IColumnDefinition.Format(FlatFiles.IColumnContext,System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.IDefaultValue">
            <summary>
            Generates a default value whenever a null is encountered on a non-nullable column.
            </summary>
        </member>
        <member name="M:FlatFiles.IDefaultValue.GetDefaultValue(FlatFiles.IColumnContext)">
            <summary>
            Gets the default value to use when a null is encountered on a non-nullable column.
            </summary>
            <param name="context">The current column context.</param>
            <returns>The default value.</returns>
        </member>
        <member name="T:FlatFiles.IDelimitedExecutionContext">
            <summary>
            Holds information about the currently running process.
            </summary>
        </member>
        <member name="P:FlatFiles.IDelimitedExecutionContext.Schema">
            <summary>
            Gets the schema being used to process the records.
            </summary>
        </member>
        <member name="P:FlatFiles.IDelimitedExecutionContext.Options">
            <summary>
            Gets the global options being used to process the records.
            </summary>
        </member>
        <member name="T:FlatFiles.IDelimitedRecordContext">
            <summary>
            Holds information about the record currently being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IDelimitedRecordContext.ExecutionContext">
            <summary>
            Gets information about the currently running process.
            </summary>
        </member>
        <member name="T:FlatFiles.IDelimitedSchemaInjectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IDelimitedSchemaInjectorWhenBuilder.Use(FlatFiles.DelimitedSchema)">
            <summary>
            Specifies which schema to use when the predicate is matched.
            </summary>
            <param name="schema">The schema to use.</param>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="T:FlatFiles.IDelimitedSchemaSelectorUseBuilder">
            <summary>
            Allows specifying additional actions to take when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IDelimitedSchemaSelectorUseBuilder.OnMatch(System.Action)">
            <summary>
            Register a method to fire whenever a match is made.
            </summary>
            <param name="action">The action to take.</param>
            <exception cref="T:System.ArgumentNullException">The action is null.</exception>
        </member>
        <member name="T:FlatFiles.IDelimitedSchemaSelectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IDelimitedSchemaSelectorWhenBuilder.Use(FlatFiles.DelimitedSchema)">
            <summary>
            Specifies which schema to use when the predicate is matched.
            </summary>
            <param name="schema">The schema to use.</param>
            <returns>The builder for further configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="T:FlatFiles.IExecutionContext">
            <summary>
            Holds information about the currently running process.
            </summary>
        </member>
        <member name="P:FlatFiles.IExecutionContext.Schema">
            <summary>
            Gets the schema being used to process the records.
            </summary>
        </member>
        <member name="P:FlatFiles.IExecutionContext.Options">
            <summary>
            Gets the global options being used to process the records.
            </summary>
        </member>
        <member name="T:FlatFiles.IFixedLengthExecutionContext">
            <summary>
            Holds information about the currently running process.
            </summary>
        </member>
        <member name="P:FlatFiles.IFixedLengthExecutionContext.Schema">
            <summary>
            Gets the schema being used to process the records.
            </summary>
        </member>
        <member name="P:FlatFiles.IFixedLengthExecutionContext.Options">
            <summary>
            Gets the global options being used to process the records.
            </summary>
        </member>
        <member name="T:FlatFiles.IFixedLengthRecordContext">
            <summary>
            Holds information about the record currently being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IFixedLengthRecordContext.ExecutionContext">
            <summary>
            Gets information about the currently running process.
            </summary>
        </member>
        <member name="T:FlatFiles.IFixedLengthSchemaInjectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IFixedLengthSchemaInjectorWhenBuilder.Use(FlatFiles.FixedLengthSchema)">
            <summary>
            Specifies which schema to use when the predicate is matched.
            </summary>
            <param name="schema">The schema to use.</param>
            <exception cref="T:System.ArgumentNullException">The schema is null.</exception>
        </member>
        <member name="T:FlatFiles.IFixedLengthSchemaSelectorUseBuilder">
            <summary>
            Allows specifying additional actions to take when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IFixedLengthSchemaSelectorUseBuilder.OnMatch(System.Action)">
            <summary>
            Register a method to fire whenever a match is made.
            </summary>
            <param name="action">The action to take.</param>
        </member>
        <member name="T:FlatFiles.IFixedLengthSchemaSelectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.IFixedLengthSchemaSelectorWhenBuilder.Use(FlatFiles.FixedLengthSchema)">
            <summary>
            Specifies which schema to use when the predicate is matched.
            </summary>
            <param name="schema">The schema to use.</param>
            <returns>The builder for further configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Schema is null.</exception>
        </member>
        <member name="T:FlatFiles.IFlatFileDataRecord">
            <summary>
            Provides access to the column values within each row for a <see cref="T:FlatFiles.FlatFileDataReader"/>.
            </summary>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetDateTimeOffset(System.Int32)">
            <summary>
            Gets the DateTime value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The DateTime value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetSByte(System.Int32)">
            <summary>
            Gets the sbyte value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The sbyte value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetTimeSpan(System.Int32)">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The string at the given index.</returns>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetUInt16(System.Int32)">
            <summary>
            Gets the unsigned short value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned short value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetUInt32(System.Int32)">
            <summary>
            Gets the unsigned int value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned int value at the given index.</returns>
        </member>
        <member name="M:FlatFiles.IFlatFileDataRecord.GetUInt64(System.Int32)">
            <summary>
            Gets the unsigned long value from the current record at the given index.
            </summary>
            <param name="i">The index of the value.</param>
            <returns>The unsigned long value at the given index.</returns>
        </member>
        <member name="T:FlatFiles.IgnoredColumn">
            <summary>
            Represents a column that should be ignored when reading a document and used as a placeholder
            when writing a document.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.#ctor">
            <summary>
            Initializes a new IgnoredColumn.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.#ctor(System.String)">
            <summary>
            Initializes a new IgnoredColumn with a header name.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:FlatFiles.IgnoredColumn.ColumnType">
            <summary>
            Gets the type of data in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.Parse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Ignores the values that was parsed from the document.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value that was parsed from the document.</param>
            <returns>A null.</returns>
        </member>
        <member name="M:FlatFiles.IgnoredColumn.Format(FlatFiles.IColumnContext,System.Object)">
            <summary>
            Returns null so nothing is written to the document.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value that needs written to the document.</param>
            <returns>A null.</returns>
        </member>
        <member name="T:FlatFiles.IMetadataColumn">
            <summary>
            Represents a column whose data is not sourced by the input file.
            </summary>
        </member>
        <member name="T:FlatFiles.Int16Column">
            <summary>
            Represents a column containing 16-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int16Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int16Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int16Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int16Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int16Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int16Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning an Int16.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int16.</returns>
        </member>
        <member name="M:FlatFiles.Int16Column.OnFormat(FlatFiles.IColumnContext,System.Int16)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Int32Column">
            <summary>
            Represents a column containing 32-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int32Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int32Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int32Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int32Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int32Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int32Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning an Int32.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int32.</returns>
        </member>
        <member name="M:FlatFiles.Int32Column.OnFormat(FlatFiles.IColumnContext,System.Int32)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Int64Column">
            <summary>
            Represents a column containing 64-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.Int64Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an Int64Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.Int64Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int64Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.Int64Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.Int64Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning an Int64.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Int64.</returns>
        </member>
        <member name="M:FlatFiles.Int64Column.OnFormat(FlatFiles.IColumnContext,System.Int64)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.INullFormatter">
            <summary>
            Specifies which value represents nulls within a file.
            </summary>
        </member>
        <member name="M:FlatFiles.INullFormatter.IsNullValue(FlatFiles.IColumnContext,System.String)">
            <summary>
            Gets whether the given string should be interpreted as null.
            </summary>
            <param name="context">The column context.</param>
            <param name="value">The value to inspect.</param>
            <returns>True if the value represents null; otherwise, false.</returns>
        </member>
        <member name="M:FlatFiles.INullFormatter.FormatNull(FlatFiles.IColumnContext)">
            <summary>
            Gets the value used to represent null when writing to a flat file.
            </summary>
            <param name="context">The column context.</param>
            <returns>The string used to represent null in the flat file.</returns>
        </member>
        <member name="T:FlatFiles.IOptions">
            <summary>
            Represents reader/writer options that are common among file types.
            </summary>
        </member>
        <member name="P:FlatFiles.IOptions.IsFirstRecordSchema">
            <summary>
            Gets whether the first record defines the schema of the file.
            </summary>
        </member>
        <member name="P:FlatFiles.IOptions.IsColumnContextDisabled">
            <summary>
            Gets whether column-level metadata should be disabled for non-metadata columns.
            </summary>
        </member>
        <member name="P:FlatFiles.IOptions.FormatProvider">
            <summary>
            Gets the global, default format provider to use.
            </summary>
        </member>
        <member name="T:FlatFiles.IReader">
            <summary>
            Defines the operations that a fixed-length reader must support.
            </summary>
        </member>
        <member name="E:FlatFiles.IReader.RecordParsed">
            <summary>
            Raised after a record is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.IReader.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.IReader.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="P:FlatFiles.IReader.Options">
            <summary>
            Gets the options controlling the behavior of the reader.
            </summary>
        </member>
        <member name="M:FlatFiles.IReader.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.IReader.GetSchemaAsync">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.IReader.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.ReadAsync">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.SkipAsync">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="M:FlatFiles.IReader.GetValues">
            <summary>
            Gets the values of the current record.
            </summary>
            <returns>The value of the current record.</returns>
        </member>
        <member name="T:FlatFiles.IRecordContext">
            <summary>
            Holds information about the record currently being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordContext.ExecutionContext">
            <summary>
            Gets information about the currently running process.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordContext.PhysicalRecordNumber">
            <summary>
            Gets the index of the record being processed.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordContext.LogicalRecordNumber">
            <summary>
            Gets the index of the record being processed, ignoring skipped records.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordContext.Record">
            <summary>
            Gets the record being processed when the error occurred.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordContext.Values">
            <summary>
            Gets the partitioned values being processed when the error occurred.
            </summary>
        </member>
        <member name="T:FlatFiles.IRecordParsedEventArgs">
            <summary>
            Holds the information related to a parsed record.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordParsedEventArgs.RecordContext">
            <summary>
            Gets the metadata associated with the current read process.
            </summary>
        </member>
        <member name="P:FlatFiles.IRecordParsedEventArgs.Values">
            <summary>
            Gets the parsed record values read from the source file.
            </summary>
        </member>
        <member name="T:FlatFiles.ISchema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="P:FlatFiles.ISchema.ColumnDefinitions">
            <summary>
            Gets the column definitions that make up the schema.
            </summary>
        </member>
        <member name="M:FlatFiles.ISchema.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the name is not found.</returns>
        </member>
        <member name="T:FlatFiles.IWriter">
            <summary>
            Defines the operations that a writer must support.
            </summary>
        </member>
        <member name="E:FlatFiles.IWriter.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.IWriter.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="P:FlatFiles.IWriter.Options">
            <summary>
            Gets the options controlling the behavior of the writer.
            </summary>
        </member>
        <member name="M:FlatFiles.IWriter.GetSchema">
            <summary>
            Gets the schema being used by the builder to create the textual representation.
            </summary>
            <returns>The schema being used by the builder to create the textual representation.</returns>
        </member>
        <member name="M:FlatFiles.IWriter.WriteSchema">
            <summary>
            Write the textual representation of the record schema.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.IWriter.WriteSchemaAsync">
            <summary>
            Write the textual representation of the record schema.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.IWriter.Write(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <returns>The textual representation of the given values.</returns>
        </member>
        <member name="M:FlatFiles.IWriter.WriteAsync(System.Object[])">
            <summary>
            Writes the textual representation of the given values to the writer.
            </summary>
            <param name="values">The values to write.</param>
            <returns>The textual representation of the given values.</returns>
        </member>
        <member name="M:FlatFiles.IWriter.WriteRaw(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a record separator should be written after the data.</param>
        </member>
        <member name="M:FlatFiles.IWriter.WriteRawAsync(System.String,System.Boolean)">
            <summary>
            Write the given data directly to the output. By default, this will
            not include a newline.
            </summary>
            <param name="data">The data to write to the output.</param>
            <param name="writeRecordSeparator">Indicates whether a record separator should be written after the data.</param>
        </member>
        <member name="T:FlatFiles.MetadataColumn`1">
            <summary>
            Represents a column whose data is not sourced by the input file.
            </summary>
            <typeparam name="T">The type of the metadata.</typeparam>
        </member>
        <member name="M:FlatFiles.MetadataColumn`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of a MetadataColumn.
            </summary>
            <param name="columnName">The name of the metadata column.</param>
        </member>
        <member name="P:FlatFiles.MetadataColumn`1.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="M:FlatFiles.MetadataColumn`1.Format(FlatFiles.IColumnContext,System.Object)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:FlatFiles.MetadataColumn`1.OnFormat(FlatFiles.IColumnContext)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:FlatFiles.MetadataColumn`1.Parse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:FlatFiles.MetadataColumn`1.OnParse(FlatFiles.IColumnContext)">
            <summary>
            Parses the given value and returns the parsed object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="T:FlatFiles.NullFormatter">
            <summary>
            Provides factory methods for generating instances of <see cref="T:FlatFiles.INullFormatter"/>.
            </summary>
        </member>
        <member name="F:FlatFiles.NullFormatter.Default">
            <summary>
            Creates a new <see cref="T:FlatFiles.INullFormatter"/> that treats solid whitespace as null.
            </summary>
        </member>
        <member name="M:FlatFiles.NullFormatter.ForValue(System.String)">
            <summary>
            Creates a new <see cref="T:FlatFiles.INullFormatter"/> that uses the given value to represent null.
            </summary>
            <param name="value">The constant used to represent null in the flat file.</param>
            <returns>An object for configuring how nulls are handled.</returns>
        </member>
        <member name="M:FlatFiles.NullFormatter.IsNullValue(FlatFiles.IColumnContext,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FlatFiles.NullFormatter.FormatNull(FlatFiles.IColumnContext)">
            <inheritdoc/>
        </member>
        <member name="T:FlatFiles.OverflowTruncationPolicy">
            <summary>
            Specifies how to truncate columns when the data exceeds to maximum width.
            </summary>
        </member>
        <member name="F:FlatFiles.OverflowTruncationPolicy.TruncateLeading">
            <summary>
            Keep the end of the data by removing the leading text.
            </summary>
        </member>
        <member name="F:FlatFiles.OverflowTruncationPolicy.TruncateTrailing">
            <summary>
            Keep the front of the data by removing the trailing text.
            </summary>
        </member>
        <member name="F:FlatFiles.OverflowTruncationPolicy.ThrowException">
            <summary>
            If the data does not fit within the specified window, throw an exception.
            </summary>
        </member>
        <member name="T:FlatFiles.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.AssignNullToNonNullable">
            <summary>
              Looks up a localized string similar to Encountered a null when assigning to the non-nullable column..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.BadPropertySelector">
            <summary>
              Looks up a localized string similar to The property selector did not select a property..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.BlankColumnName">
            <summary>
              Looks up a localized string similar to An attempt was made to define a column with a null or blank name..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.DelimitedRecordWrongNumberOfColumns">
            <summary>
              Looks up a localized string similar to The record did not have the number of columns specified in the schema. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.DuplicateColumnName">
            <summary>
              Looks up a localized string similar to An attempt was made to add a column to a schema where the same name already exists..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.EmptyRecordSeparator">
            <summary>
              Looks up a localized string similar to The record separator cannot be null or empty..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.EmptySeparator">
            <summary>
              Looks up a localized string similar to The column separator cannot be null or empty..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.FixedLengthRecordTooShort">
            <summary>
              Looks up a localized string similar to The record did not meet the length requirements specified in the schema. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidAlignment">
            <summary>
              Looks up a localized string similar to Encountered an invalid fixed width column alignment..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidColumnConversion">
            <summary>
              Looks up a localized string similar to Failed to convert &apos;{0}&apos; to &apos;{1}&apos;. Column: {2}, Position: {3}..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidColumnWidth">
            <summary>
              Looks up a localized string similar to An attempt was made to define a column with a negative width..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidRecordConversion">
            <summary>
              Looks up a localized string similar to Encountered an invalid conversion while processing the record. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidRecordFormatNumber">
            <summary>
              Looks up a localized string similar to Encountered an invalid record format. Record {0}..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.InvalidTruncationPolicy">
            <summary>
              Looks up a localized string similar to Encountered an invalid overflow truncation policy..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.MetadataExpectingContext">
            <summary>
              Looks up a localized string similar to The schema was configured with a metadata column but column-level context has been disabled..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.MissingMatcher">
            <summary>
              Looks up a localized string similar to No schema was found for the given record..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.NoAutoMapPropertyType">
            <summary>
              Looks up a localized string similar to Could not find an appropriate property mapping for the type of the column &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.NoDefaultConstructor">
            <summary>
              Looks up a localized string similar to The type you are trying to map does not have a default constructor..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.NoMoreRecords">
            <summary>
              Looks up a localized string similar to An attempt to view values was made after all of the records were read..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.NotEnumType">
            <summary>
              Looks up a localized string similar to The type provided is not a an enumeration type..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.ReadingWithErrors">
            <summary>
              Looks up a localized string similar to An attempt was made to work with a parser after an invalid record was encountered..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.ReadNotCalled">
            <summary>
              Looks up a localized string similar to An attempt to view values was made before reading the first record..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.ReadOnlyProperty">
            <summary>
              Looks up a localized string similar to Cannot read values into the {0} property because it is read-only..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.RecordSeparatorRequired">
            <summary>
              Looks up a localized string similar to A record specifier must be used when selecting the schema dynamically..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.SameSeparator">
            <summary>
              Looks up a localized string similar to The column and record separator are the same string..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.SchemaNotDefined">
            <summary>
              Looks up a localized string similar to An attempt was made to retrieve the schema when none was extracted or provided..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.UnmatchedQuote">
            <summary>
              Looks up a localized string similar to A syntax error was encountered: Unmatched quote..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.ValueExceedsWindowWidth">
            <summary>
              Looks up a localized string similar to The value exceeded the configured window width..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.WriteOnlyProperty">
            <summary>
              Looks up a localized string similar to Cannot write values from the {0} property because it is write-only..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.WrongNumberOfValues">
            <summary>
              Looks up a localized string similar to The wrong number of values were passed..
            </summary>
        </member>
        <member name="P:FlatFiles.Properties.Resources.WrongPropertyType">
            <summary>
              Looks up a localized string similar to The actual property type did not match the indicated type..
            </summary>
        </member>
        <member name="T:FlatFiles.QuoteBehavior">
            <summary>
             Specifies how FlatFiles should quote delimited file fields.
            </summary>
        </member>
        <member name="F:FlatFiles.QuoteBehavior.Default">
            <summary>
            FlatFiles will only put quotes around values that need to be quoted.
            </summary>
        </member>
        <member name="F:FlatFiles.QuoteBehavior.AlwaysQuote">
            <summary>
            FlatFiles will put quotes around all values.
            </summary>
        </member>
        <member name="F:FlatFiles.QuoteBehavior.Never">
            <summary>
            FlatFiles will never put quotes around values.
            </summary>
            <remarks>This can result in the generation of invalid files.</remarks>
        </member>
        <member name="T:FlatFiles.RecordErrorEventArgs">
            <summary>
            Raised when a error occurs while reading or writing a record.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordErrorEventArgs.RecordContext">
            <summary>
            Gets the metadata for the record being processed when the error occurred.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordErrorEventArgs.Exception">
            <summary>
            Gets the exception that was thrown.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordErrorEventArgs.IsHandled">
            <summary>
            Gets or sets whether the parser should attempt to continue reading/writing.
            </summary>
        </member>
        <member name="T:FlatFiles.RecordNumberColumn">
            <summary>
            Represents a column containing the record number metadata.
            </summary>
        </member>
        <member name="M:FlatFiles.RecordNumberColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a RecordNumberColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.RecordNumberColumn.IncludeSchema">
            <summary>
            Gets or sets whether the header record, if present, should be included in the count.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordNumberColumn.IncludeSkippedRecords">
            <summary>
            Gets or sets whether filtered records should be included in the count.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordNumberColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordNumberColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordNumberColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.RecordNumberColumn.OnFormat(FlatFiles.IColumnContext)">
            <summary>
            Provides a textual representation for the value.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <returns>The formatted value.</returns>
            <exception cref="T:FlatFiles.FlatFileException">This column requires column-level context but it has been disabled.</exception>
        </member>
        <member name="M:FlatFiles.RecordNumberColumn.OnParse(FlatFiles.IColumnContext)">
            <summary>
            Parses a textual representation of the value.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <returns>The parsed value.</returns>
            <exception cref="T:FlatFiles.FlatFileException">This column requires column-level context but it has been disabled.</exception>
        </member>
        <member name="T:FlatFiles.RecordProcessingException">
            <summary>
            Represents an error that was thrown while parsing a record.
            </summary>
        </member>
        <member name="P:FlatFiles.RecordProcessingException.RecordContext">
            <summary>
            Gets the metadata for the record being processed when the error occurred.
            </summary>
        </member>
        <member name="T:FlatFiles.SByteColumn">
            <summary>
            Represents a column of signed byte values.
            </summary>
        </member>
        <member name="M:FlatFiles.SByteColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a SByteColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.SByteColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use to parse the value.
            </summary>
        </member>
        <member name="P:FlatFiles.SByteColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing the value.
            </summary>
        </member>
        <member name="P:FlatFiles.SByteColumn.OutputFormat">
            <summary>
            Gets or sets the formatting to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.SByteColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value into a signed byte.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed signed byte value.</returns>
        </member>
        <member name="M:FlatFiles.SByteColumn.OnFormat(FlatFiles.IColumnContext,System.SByte)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Schema">
            <summary>
            Defines the expected format of a record in a file.
            </summary>
        </member>
        <member name="M:FlatFiles.Schema.#ctor">
            <summary>
            Initializes a new instance of a Schema.
            </summary>
        </member>
        <member name="P:FlatFiles.Schema.ColumnDefinitions">
            <summary>
            Gets the column definitions that make up the schema.
            </summary>
        </member>
        <member name="M:FlatFiles.Schema.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName">The name of the column to get the index for.</param>
            <returns>The index of the column with the given name -or- -1 if the name is not found.</returns>
        </member>
        <member name="M:FlatFiles.Schema.AddColumnBase(FlatFiles.IColumnDefinition)">
            <summary>
            Adds a column to the schema, using the given definition to define it.
            </summary>
            <param name="definition">The definition of the column to add.</param>
            <returns>The current schema.</returns>
        </member>
        <member name="M:FlatFiles.Schema.ParseValues(FlatFiles.IRecoverableRecordContext,System.String[])">
            <summary>
            Parses the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="context">The metadata for the current record being processed.</param>
            <param name="values">The values to parse.</param>
            <returns>The parsed objects.</returns>
        </member>
        <member name="M:FlatFiles.Schema.FormatValues(FlatFiles.IRecoverableRecordContext,System.Object[])">
            <summary>
            Formats the given values assuming that they are in the same order as the column definitions.
            </summary>
            <param name="context">The metadata for the record currently being processed.</param>
            <param name="values">The values to format.</param>
            <returns>The formatted values.</returns>
        </member>
        <member name="T:FlatFiles.SingleColumn">
            <summary>
            Represents a column containing singles.
            </summary>
        </member>
        <member name="M:FlatFiles.SingleColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of an SingleColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.SingleColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.SingleColumn.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.SingleColumn.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.SingleColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning a Single.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed Single.</returns>
        </member>
        <member name="M:FlatFiles.SingleColumn.OnFormat(FlatFiles.IColumnContext,System.Single)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.StringColumn">
            <summary>
            Represents a column containing strings.
            </summary>
        </member>
        <member name="M:FlatFiles.StringColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a StringColumnDefinition.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.StringColumn.ColumnType">
            <summary>
            Gets the type of the values in the column.
            </summary>
        </member>
        <member name="P:FlatFiles.StringColumn.Trim">
            <summary>
            Gets or sets whether the value should be trimmed.
            </summary>
        </member>
        <member name="M:FlatFiles.StringColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Returns the given value trimmed.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to trim.</param>
            <returns>The value trimmed.</returns>
        </member>
        <member name="P:FlatFiles.StringColumn.IsTrimmed">
            <summary>
            Gets whether the value should be trimmed prior to parsing.
            </summary>
        </member>
        <member name="M:FlatFiles.StringColumn.OnFormat(FlatFiles.IColumnContext,System.String)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.TimeSpanColumn">
            <summary>
            Represents a column containing durations.
            </summary>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of a TimeSpanColumn.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromDays(FlatFiles.DoubleColumn)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the days 
            are stored as doubles in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromHours(FlatFiles.DoubleColumn)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the hours 
            are stored as doubles in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromMillseconds(FlatFiles.DoubleColumn)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the milliseconds 
            are stored as doubles in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromMinutes(FlatFiles.DoubleColumn)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the minutes 
            are stored as doubles in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromSeconds(FlatFiles.DoubleColumn)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the seconds 
            are stored as doubles in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.FromTicks(FlatFiles.Int64Column)">
            <summary>
            Creates a column for reading and writing <see cref="T:System.TimeSpan"/> values where the ticks 
            are stored as longs in the flat file.
            </summary>
            <param name="column">The column for reading/writing doubles from the file.</param>
            <returns>A column for reading/writing <see cref="T:System.TimeSpan"/> values.</returns>
        </member>
        <member name="P:FlatFiles.TimeSpanColumn.FormatProvider">
            <summary>
            Gets or sets the format provider to use.
            </summary>
        </member>
        <member name="P:FlatFiles.TimeSpanColumn.InputFormat">
            <summary>
            Gets or sets the format used to parse the <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:FlatFiles.TimeSpanColumn.OutputFormat">
            <summary>
            Gets or sets the format used to write the <see cref="T:System.TimeSpan"/> to the flat file.
            </summary>
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.OnParse(FlatFiles.IColumnContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlatFiles.TimeSpanColumn.OnFormat(FlatFiles.IColumnContext,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:FlatFiles.TypeMapping.AutoMapMatcher">
            <summary>
            Provides helper methods for creating auto-mapping matchers.
            </summary>
        </member>
        <member name="F:FlatFiles.TypeMapping.AutoMapMatcher.Default">
            <summary>
            Gets the default auto-mapping matcher (case-insensitive name comparison).
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapMatcher.For(System.Func{FlatFiles.IColumnDefinition,System.Reflection.MemberInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets a matcher for the given delegate.
            </summary>
            <param name="matcher">A delegate that performs the auto-mapping matcher.</param>
            <param name="useFallback">Specifies whether to fallback on an exact name match if no matches are found.</param>
            <returns>The generated matcher.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapMatcher.For(FlatFiles.TypeMapping.IAutoMapResolver,System.Boolean)">
            <summary>
            Gets a matcher for the given name resolver.
            </summary>
            <param name="resolver">The name resolver used to generate the column names when writing.</param>
            <param name="useFallback">Specifies whether to fallback on an exact name match if no matches are found.</param>
            <returns>The generated matcher.</returns>
        </member>
        <member name="P:FlatFiles.TypeMapping.AutoMapMatcher.UseFallback">
            <summary>
            Gets or sets whether to fallback on an exact name match if no other matcher is found.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapMatcher.IsMatch(FlatFiles.IColumnDefinition,System.Reflection.MemberInfo)">
            <summary>
            Gets whether the column should be mapped to the property or field.
            </summary>
            <param name="columnDefinition">The column being mapped.</param>
            <param name="member">The property or field to inspect.</param>
            <returns>True if the column and property match; otherwise, false.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.AutoMapResolver">
            <summary>
            Provides the information needed to map a property to a column when writing.
            </summary>
        </member>
        <member name="F:FlatFiles.TypeMapping.AutoMapResolver.Default">
            <summary>
            Gets the default auto-map resolver.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapResolver.For(System.Func{System.Reflection.MemberInfo,System.String},System.Func{System.Reflection.MemberInfo,System.Int32})">
            <summary>
            Gets a resolver for the given delegate(s).
            </summary>
            <param name="nameResolver">A delegate for getting the column names.</param>
            <param name="positionResolver">A delegate for getting the column positions.</param>
            <returns>The generated resolver.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapResolver.GetPosition(System.Reflection.MemberInfo)">
            <summary>
            Gets the index of the column in the file.
            </summary>
            <param name="member">The member to get the index for.</param>
            <returns>The index of the column in the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.AutoMapResolver.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the column for a member.
            </summary>
            <param name="member">The member to generate the column name for.</param>
            <returns>The generated name -or- null to indicate the member should not be mapped.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.DelimitedTypeMapper">
            <summary>
            Provides methods for creating type mappers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.Define``1">
            <summary>
            Creates a configuration object that can be used to map to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.Define``1(System.Func{``0})">
            <summary>
            Creates a configuration object that can be used to map to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <param name="factory">A method that generates an instance of the entity.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.DefineDynamic(System.Type)">
            <summary>
            Creates a configuration object that can be used to map to and from a runtime entity and a flat file record.
            </summary>
            <param name="entityType">The type of the entity whose properties will be mapped.</param>
            <returns>The configuration object.</returns>
            <remarks>The entity type must have a default constructor.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.DefineDynamic(System.Type,System.Func{System.Object})">
            <summary>
            Creates a configuration object that can be used to map to and from a runtime entity and a flat file record.
            </summary>
            <param name="entityType">The type of the entity whose properties will be mapped.</param>
            <param name="factory">A method that generates an instance of the entity.</param>
            <returns>The configuration object.</returns>
            <remarks>The entity type must have a default constructor.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.GetAutoMappedReader``1(System.IO.TextReader,FlatFiles.DelimitedOptions,FlatFiles.TypeMapping.IAutoMapMatcher)">
            <summary>
            Gets a reader whose column types are deduced by matching the entity property names to the column names.
            </summary>
            <typeparam name="TEntity">The type of the entity to deduce the column types for.</typeparam>
            <param name="reader">The text reader containing the schema and records.</param>
            <param name="options">Options used to read the data.</param>
            <param name="matcher">An object that can determine if a column should be mapped to a property.</param>
            <returns>A reader object for iterating the parsed records.</returns>
            <remarks>
            The first line of the input file must contain the schema, whose column names must match the property
            names in the provided entity type. The data for each column must be in a format that .NET can
            parse without customization.
            </remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.GetAutoMappedReaderAsync``1(System.IO.TextReader,FlatFiles.DelimitedOptions,FlatFiles.TypeMapping.IAutoMapMatcher)">
            <summary>
            Gets a reader whose column types are deduced by matching the entity property names to the column names.
            </summary>
            <typeparam name="TEntity">The type of the entity to deduce the column types for.</typeparam>
            <param name="reader">The text reader containing the schema and records.</param>
            <param name="options">Options used to read the data.</param>
            <param name="matcher">An object that can determine if a column should be mapped to a property.</param>
            <returns>A reader object for iterating the parsed records.</returns>
            <remarks>
            The first line of the input file must contain the schema, whose column names must match the property
            names in the provided entity type. The data for each column must be in a format that .NET can
            parse without customization.
            </remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapper.GetAutoMappedWriter``1(System.IO.TextWriter,FlatFiles.DelimitedOptions,FlatFiles.TypeMapping.IAutoMapResolver)">
            <summary>
            Gets a writer whose column types are deduced from the entity properties.
            </summary>
            <typeparam name="TEntity">The type of the entity to deduce the column types for.</typeparam>
            <param name="writer">The text writer to write the schema and records to.</param>
            <param name="options">Options used to read the data.</param>
            <param name="resolver">An object that will determine the name of the generated columns.</param>
            <returns>A writer object for serializing entities.</returns>
            <remarks>Unless options are provided, by default this method will write the schema before the first record.</remarks>
        </member>
        <member name="T:FlatFiles.TypeMapping.DelimitedTypeMapperInjector">
            <summary>
            Represents a class that can dynamically map types based on the shape of the record.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.#ctor">
            <summary>
            Initializes a new instance of a DelimitedTypeMapperInjector.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.When``1(System.Func{``0,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.When(System.Func{System.Object,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.WithDefault``1(FlatFiles.TypeMapping.IDelimitedTypeMapper{``0})">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default type mapper to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.WithDefault(FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default schema to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperInjector.GetWriter(System.IO.TextWriter,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed writer for writing the objects to the file.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="options">The separate value options to use.</param>
            <returns>The typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.DelimitedTypeMapperSelector">
            <summary>
            Represents a class that can dynamically map types based on the shap of the record.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperSelector.#ctor">
            <summary>
            Initializes a new instance of a DelimitedTypeMapperSelector.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperSelector.When(System.Func{System.String[],System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperSelector.WithDefault``1(FlatFiles.TypeMapping.IDelimitedTypeMapper{``0})">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default type mapper to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperSelector.WithDefault(FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default schema to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.DelimitedTypeMapperSelector.GetReader(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed reader for reading the objects from the file.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="options">The separate value options to use.</param>
            <returns>The typed reader.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.FixedLengthTypeMapper">
            <summary>
            Provides methods for creating type mappers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.Define``1">
            <summary>
            Creates a configuration object that can be used to map to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.Define``1(System.Func{``0})">
            <summary>
            Creates a configuration object that can be used to map to and from an entity and a flat file record.
            </summary>
            <typeparam name="TEntity">The type of the entity whose properties will be mapped.</typeparam>
            <param name="factory">A method that generates an instance of the entity.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.DefineDynamic(System.Type)">
            <summary>
            Creates a configuration object that can be used to map to and from a runtime entity and a flat file record.
            </summary>
            <param name="entityType">The type of the entity whose properties will be mapped.</param>
            <returns>The configuration object.</returns>
            <remarks>The entity type must have a default constructor.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapper.DefineDynamic(System.Type,System.Func{System.Object})">
            <summary>
            Creates a configuration object that can be used to map to and from a runtime entity and a flat file record.
            </summary>
            <param name="entityType">The type of the entity whose properties will be mapped.</param>
            <param name="factory">A method that generates an instance of the entity.</param>
            <returns>The configuration object.</returns>
            <remarks>The entity type must have a default constructor.</remarks>
        </member>
        <member name="T:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector">
            <summary>
            Represents a class that can dynamically map types based on the shape of the record.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector.When``1(System.Func{``0,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector.When(System.Func{System.Object,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector.WithDefault``1(FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default type mapper to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector.WithDefault(FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default schema to use.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperInjector.GetWriter(System.IO.TextWriter,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed writer for writing the objects to the file.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="options">The separate value options to use.</param>
            <returns>The typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector">
            <summary>
            Represents a class that can dynamically map types based on the shap of the record.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector.#ctor">
            <summary>
            Initializes a new instance of a FixedLengthTypeMapperSelector.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector.When(System.Func{System.String,System.Boolean})">
            <summary>
            Indicates that the given schema should be used when the predicate returns true.
            </summary>
            <param name="predicate">Indicates whether the schema should be used for a record.</param>
            <returns>An object for specifying which schema to use when the predicate matches.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <remarks>Previously registered schemas will be used if their predicates match.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector.WithDefault``1(FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default type mapper to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector.WithDefault(FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper)">
            <summary>
            Provides the schema to use by default when no other matches are found.
            </summary>
            <param name="typeMapper">The default schema to use.</param>
            <returns>The current selector to allow for further customization.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.FixedLengthTypeMapperSelector.GetReader(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed reader for reading the objects from the file.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="options">The separate value options to use.</param>
            <returns>The typed reader.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IAutoMapMatcher">
            <summary>
            Determines if a column should be mapped to a property or field.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IAutoMapMatcher.UseFallback">
            <summary>
            Gets or sets whether to fallback on an exact name match if no other matcher is found.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IAutoMapMatcher.IsMatch(FlatFiles.IColumnDefinition,System.Reflection.MemberInfo)">
            <summary>
            Gets whether the column should be mapped to the property or field.
            </summary>
            <param name="columnDefinition">The column being mapped.</param>
            <param name="member">The property or field to inspect.</param>
            <returns>True if the column and property match; otherwise, false.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IAutoMapResolver">
            <summary>
            Provides the information needed to map a property to a column when writing.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IAutoMapResolver.GetPosition(System.Reflection.MemberInfo)">
            <summary>
            Gets the index of the column in the file.
            </summary>
            <param name="member">The member to get the index for.</param>
            <returns>The index of the column in the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IAutoMapResolver.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the column for a member.
            </summary>
            <param name="member">The member to generate the column name for.</param>
            <returns>The generated name.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IBooleanPropertyMapping">
            <summary>
            Represents the mapping from a type property to a Boolean column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.TrueString(System.String)">
            <summary>
            Sets the value used to represent true.
            </summary>
            <param name="value">The value used to represent true.</param>
            <returns>The property mapping for futher configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.FalseString(System.String)">
            <summary>
            Sets the value used to represent false.
            </summary>
            <param name="value">The value used to represent false.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBooleanPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IByteArrayPropertyMapping">
            <summary>
            Represents the mapping from a type property to a byte array column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.Encoding(System.Text.Encoding)">
            <summary>
            Sets the encoding to use to read and write the column.
            </summary>
            <param name="encoding">The encoding to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IByteArrayPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IBytePropertyMapping">
            <summary>
            Represents the mapping from a type property to a byte column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IBytePropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ICharArrayPropertyMapping">
            <summary>
            Represents the mapping from a type property to a char array column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICharArrayPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ICustomMapping">
            <summary>
            Represents a mapping that allows for specifying a custom reader and writer delegate.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithReader(System.Action{System.Object,System.Object})">
            <summary>
            Specifies the delegate used to store a value in an entity. 
            </summary>
            <param name="reader">A delegate that can populate the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithReader(System.Action{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Specifies the delegate used to store a value in an entity. 
            </summary>
            <param name="reader">A delegate that can populate the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithWriter(System.Action{System.Object,System.Object[]})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithWriter(System.Action{FlatFiles.IColumnContext,System.Object,System.Object[]})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithWriter(System.Func{System.Object,System.Object})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping.WithWriter(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ICustomMapping`1">
            <summary>
            Represents a mapping that allows for specifying a custom reader and writer delegate.
            </summary>
            <typeparam name="TEntity">The type of the entity being mapped.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithReader``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Specifies the delegate used to store a value in an entity. 
            </summary>
            <param name="reader">A delegate that can populate the entity.</param>
            <typeparam name="TProp">The type of the property being read.</typeparam>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithReader(System.Action{`0,System.Object})">
            <summary>
            Specifies the delegate used to store a value in an entity. 
            </summary>
            <param name="reader">A delegate that can populate the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithReader(System.Action{FlatFiles.IColumnContext,`0,System.Object})">
            <summary>
            Specifies the delegate used to store a value in an entity. 
            </summary>
            <param name="reader">A delegate that can populate the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithWriter(System.Action{`0,System.Object[]})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithWriter(System.Action{FlatFiles.IColumnContext,`0,System.Object[]})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithWriter``1(System.Func{`0,``0})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <typeparam name="TProp">The type of the property being read.</typeparam>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ICustomMapping`1.WithWriter``1(System.Func{FlatFiles.IColumnContext,`0,``0})">
            <summary>
            Specifies the delegate used to store an entity value in the output.
            </summary>
            <param name="writer">A delegate that can extract a value from the entity.</param>
            <typeparam name="TProp">The type of the property being read.</typeparam>
            <returns>The mapper for further customizations.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping">
            <summary>
            Represents the mapping from a type property to a DateTimeOffset column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the date/time format the input is expected to be in.
            </summary>
            <param name="format">The format to expect.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the date/time format to use for output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use when reading and writing date/times.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimeOffsetPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDateTimePropertyMapping">
            <summary>
            Represents the mapping from a type property to a DateTime column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the date/time format the input is expected to be in.
            </summary>
            <param name="format">The format to expect.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the date/time format to use for output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use when reading and writing date/times.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDateTimePropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDecimalPropertyMapping">
            <summary>
            Represents the mapping from a type property to a decimal column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDecimalPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping">
            <summary>
            Represents the mapping from a type property to an object.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.WithOptions(FlatFiles.DelimitedOptions)">
            <summary>
            Sets the options to use when reading/writing the complex type.
            </summary>
            <param name="options">The options to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedComplexPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1">
            <summary>
            Supports configuration for mapping between entity properties and flat file columns.
            </summary>
            <typeparam name="TEntity">The type of the entity being mapped.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char[]}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IDelimitedTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="accessor">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="accessor">An expression that returns the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.Ignored">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.CustomMapping(FlatFiles.IColumnDefinition)">
            <summary>
            Specifies the next column will be mapped using custom functions.
            </summary>
            <param name="column">The custom column definition for parsing and formatting the column.</param>
            <returns>An object to configure the custom mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.OptimizeMapping(System.Boolean)">
            <summary>
            When optimized (the default), mappers will use System.Reflection.Emit to generate 
            code to get and set entity properties, resulting in significant performance improvements. 
            However, some environments do not support runtime JIT, so disabling optimization will allow
            FlatFiles to work.
            </summary>
            <param name="isOptimized">Specifies whether the mapping process should be optimized.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeConfiguration`1.UseFactory``1(System.Func{``0})">
            <summary>
            Specifies a different factory method to use when initializing nested members.
            </summary>
            <typeparam name="TOther">The type of the entity created by the factory.</typeparam>
            <param name="factory">A method that generates an instance of the entity.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypedReader`1">
            <summary>
             Represents a delimited reader that will generate entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being read.</typeparam>
        </member>
        <member name="E:FlatFiles.TypeMapping.IDelimitedTypedReader`1.RecordRead">
            <summary>
            Raised when a record is read, before it is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.IDelimitedTypedReader`1.RecordParsed">
            <summary>
            Raised after a record is parsed.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IDelimitedTypedReader`1.Reader">
            <summary>
            Gets the underlying reader.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypedReader`1.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypeMapper`1">
            <summary>
            Supports reading to and writing from flat files for a type.
            </summary>
            <typeparam name="TEntity">The type of the entity read and written.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapper`1.Read(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapper`1.GetReader(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapper`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.DelimitedOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapper`1.WriteAsync(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.DelimitedOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapper`1.GetWriter(System.IO.TextWriter,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypeMapperInjectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapperInjectorWhenBuilder.Use(FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper)">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypeMapperInjectorWhenBuilder`1">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
            <typeparam name="TEntity">The type of the entity mapped by the mapper.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapperInjectorWhenBuilder`1.Use(FlatFiles.TypeMapping.IDelimitedTypeMapper{`0})">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDelimitedTypeMapperSelectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapperSelectorWhenBuilder.Use``1(FlatFiles.TypeMapping.IDelimitedTypeMapper{``0})">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <typeparam name="TEntity">The type of the entity mapped by the mapper.</typeparam>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDelimitedTypeMapperSelectorWhenBuilder.Use(FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper)">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDoublePropertyMapping">
            <summary>
            Represents the mapping from a type property to a double column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDoublePropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration">
            <summary>
            Supports runtime configuration for mapping between runtime type entity properties and flat file columns.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.BooleanProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.ByteArrayProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.ByteProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.SByteProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.CharArrayProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.CharProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.DateTimeProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.DateTimeOffsetProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.DecimalProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.DoubleProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.GuidProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.Int16Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.UInt16Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.Int32Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.UInt32Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.Int64Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.UInt64Property(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.SingleProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.StringProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.TimeSpanProperty(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.ComplexProperty``1(System.String,FlatFiles.TypeMapping.IDelimitedTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.ComplexProperty``1(System.String,FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.EnumProperty``1(System.String)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.Ignored">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.CustomMapping(FlatFiles.IColumnDefinition)">
            <summary>
            Specifies the next column will be mapped using custom functions.
            </summary>
            <param name="column">The custom column definition for parsing and formatting the column.</param>
            <returns>An object to configure the custom mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.OptimizeMapping(System.Boolean)">
            <summary>
            When optimized (the default), mappers will use System.Reflection.Emit to generate 
            code to get and set entity properties, resulting in significant performance improvements. 
            However, some environments do not support runtime JIT, so disabling optimization will allow
            FlatFiles to work.
            </summary>
            <param name="isOptimized">Specifies whether the mapping process should be optimized.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeConfiguration.UseFactory(System.Type,System.Func{System.Object})">
            <summary>
            Specifies a different factory method to use when initializing nested members.
            </summary>
            <param name="entityType">
            The type of the entity to associate the factory with. The factory must return instances of that type.
            </param>
            <param name="factory">A method that generates an instance of the entity.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper">
            <summary>
            Supports reading to and writing from flat files for a runtime type. 
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper.Read(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper.GetReader(System.IO.TextReader,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the delimited document.</param>
            <param name="options">The options controlling how the delimited document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object},FlatFiles.DelimitedOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper.WriteAsync(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object},FlatFiles.DelimitedOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the delimited document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicDelimitedTypeMapper.GetWriter(System.IO.TextWriter,FlatFiles.DelimitedOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the fixed-length document.</param>
            <param name="options">The options controlling how the delimited document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration">
            <summary>
            Supports runtime configuration for mapping between runtime type entity properties and flat file columns.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.BooleanProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.ByteArrayProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.ByteProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.SByteProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.CharArrayProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.CharProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.DateTimeProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.DateTimeOffsetProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.DecimalProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.DoubleProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.GuidProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.Int16Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.UInt16Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.Int32Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.UInt32Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.Int64Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.UInt64Property(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.SingleProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.StringProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.TimeSpanProperty(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.ComplexProperty``1(System.String,FlatFiles.TypeMapping.IDelimitedTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.ComplexProperty``1(System.String,FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.EnumProperty``1(System.String,FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="memberName">The name of the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.Ignored(FlatFiles.Window)">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.CustomMapping(FlatFiles.IColumnDefinition,FlatFiles.Window)">
            <summary>
            Specifies the next column will be mapped using custom functions.
            </summary>
            <param name="column">The custom column definition for parsing and formatting the column.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the custom mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.OptimizeMapping(System.Boolean)">
            <summary>
            When optimized (the default), mappers will use System.Reflection.Emit to generate 
            code to get and set entity properties, resulting in significant performance improvements. 
            However, some environments do not support runtime JIT, so disabling optimization will allow
            FlatFiles to work.
            </summary>
            <param name="isOptimized">Specifies whether the mapping process should be optimized.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeConfiguration.UseFactory(System.Type,System.Func{System.Object})">
            <summary>
            Specifies a different factory method to use when initializing nested members.
            </summary>
            <param name="entityType">
            The type of the entity to associate the factory with. The factory must return instances of that type.
            </param>
            <param name="factory">A method that generates an instance of the entity.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper">
            <summary>
            Supports reading to and writing from flat files for a runtime type. 
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper.Read(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper.GetReader(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object},FlatFiles.FixedLengthOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper.WriteAsync(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object},FlatFiles.FixedLengthOptions)">
            <summary>
            Writes the given entities to the given stream.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="entities">The entities to write to the stream.</param>
            <param name="options">The options used to format the output.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper.GetWriter(System.IO.TextWriter,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IEnumPropertyMapping`1">
            <summary>
            Represents the mapping from a type property to an enum column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Parser(System.Func{System.String,`0})">
            <summary>
            Sets the parser to use to convert from a string to an enum.
            </summary>
            <param name="parser">The parsing function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Formatter(System.Func{`0,System.String})">
            <summary>
            Sets the formatter to use to convert from an enum to a string.
            </summary>
            <param name="formatter">The formatting function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IEnumPropertyMapping`1.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping">
            <summary>
            Represents the mapping from a type property to an object.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.WithOptions(FlatFiles.FixedLengthOptions)">
            <summary>
            Sets the options to use when reading/writing the complex type.
            </summary>
            <param name="options">The options to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthComplexPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1">
            <summary>
            Supports configuration for mapping between entity properties and flat file columns.
            </summary>
            <typeparam name="TEntity">The type of the entity being mapped.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.GetSchema">
            <summary>
            Gets the schema defined by the current configuration.
            </summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char[]}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IDelimitedTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="accessor">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TProp">The type of the property being mapped.</typeparam>
            <param name="accessor">An expression tha returns the property to map.</param>
            <param name="mapper">A type mapper describing the schema of the complex type.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.EnumProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},FlatFiles.Window)">
            <summary>
            Associates the property with the type mapper and returns an object for configuration.
            </summary>
            <typeparam name="TEnum">The enumerated type of the property.</typeparam>
            <param name="accessor">An expression that returns the property to map.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the property mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.Ignored(FlatFiles.Window)">
            <summary>
            Specifies that the next column is ignored and returns an object for configuration.
            </summary>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.CustomMapping(FlatFiles.IColumnDefinition,FlatFiles.Window)">
            <summary>
            Specifies the next column will be mapped using custom functions.
            </summary>
            <param name="column">The custom column definition for parsing and formatting the column.</param>
            <param name="window">Specifies how the fixed-width column appears in a flat file.</param>
            <returns>An object to configure the custom mapping.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.OptimizeMapping(System.Boolean)">
            <summary>
            When optimized (the default), mappers will use System.Reflection.Emit to generate 
            code to get and set entity properties, resulting in significant performance improvements. 
            However, some environments do not support runtime JIT, so disabling optimization will allow
            FlatFiles to work.
            </summary>
            <param name="isOptimized">Specifies whether the mapping process should be optimized.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeConfiguration`1.UseFactory``1(System.Func{``0})">
            <summary>
            Specifies a different factory method to use when initializing nested members.
            </summary>
            <typeparam name="TOther">The type of the entity created by the factory.</typeparam>
            <param name="factory">A method that generates an instance of the entity.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypedReader`1">
            <summary>
             Represents a fixed length reader that will generate entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being read.</typeparam>
        </member>
        <member name="E:FlatFiles.TypeMapping.IFixedLengthTypedReader`1.RecordRead">
            <summary>
            Raised when a record is read from the source file, before it is partitioned.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.IFixedLengthTypedReader`1.RecordPartitioned">
            <summary>
            Raised after a record is partitioned, before it is parsed.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.IFixedLengthTypedReader`1.RecordParsed">
            <summary>
            Raised after a record is parsed.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IFixedLengthTypedReader`1.Reader">
            <summary>
            Gets the underlying reader.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypedReader`1.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1">
            <summary>
            Supports configuring reading to and writing from flat files for a type.
            </summary>
            <typeparam name="TEntity">The type of the entity read and written.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.Read(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Reads the entities from the given reader.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>The entities that are extracted from the file.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.GetReader(System.IO.TextReader,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed reader to read entities from the underlying document.
            </summary>
            <param name="reader">A reader over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is read.</param>
            <returns>A typed reader.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.FixedLengthOptions)">
            <summary>
            Writes the given entities to the given writer.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="entities">The entities to write to the document.</param>
            <param name="options">The options controlling how the fixed-length document is written.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.WriteAsync(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},FlatFiles.FixedLengthOptions)">
            <summary>
            Writes the given entities to the given writer.
            </summary>
            <param name="writer">A writer over the fixed-length document.</param>
            <param name="entities">The entities to write to the document.</param>
            <param name="options">The options controlling how the fixed-length document is written.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapper`1.GetWriter(System.IO.TextWriter,FlatFiles.FixedLengthOptions)">
            <summary>
            Gets a typed writer to write entities to the underlying document.
            </summary>
            <param name="writer">The writer over the fixed-length document.</param>
            <param name="options">The options controlling how the fixed-length document is written.</param>
            <returns>A typed writer.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeMapperInjectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapperInjectorWhenBuilder.Use(FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper)">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeMapperInjectorWhenBuilder`1">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
            <typeparam name="TEntity">The type of the entity mapped by the mapper.</typeparam>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapperInjectorWhenBuilder`1.Use(FlatFiles.TypeMapping.IFixedLengthTypeMapper{`0})">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IFixedLengthTypeMapperSelectorWhenBuilder">
            <summary>
            Allows specifying which schema to use when a predicate is matched.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapperSelectorWhenBuilder.Use``1(FlatFiles.TypeMapping.IFixedLengthTypeMapper{``0})">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <typeparam name="TEntity">The type of the entity mapped by the mapper.</typeparam>
            <param name="mapper">The type mapper to use.</param>
            <exception cref="T:System.ArgumentNullException">The mapper is null.</exception>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IFixedLengthTypeMapperSelectorWhenBuilder.Use(FlatFiles.TypeMapping.IDynamicFixedLengthTypeMapper)">
            <summary>
            Specifies which type mapper to use when the predicate is matched.
            </summary>
            <param name="mapper">The type mapper to use.</param>
            <exception cref="T:System.ArgumentNullException">The mapper is null.</exception>
            <returns>The type mapper selector.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IGuidPropertyMapping">
            <summary>
            Represents the mapping from a type property to a Guid column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the format to use when reading input.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the format to use when writing output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IGuidPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IIgnoredMapping">
            <summary>
            Represents the mapping from a type property to a Boolean column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IIgnoredMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt16PropertyMapping">
            <summary>
            Represents the mapping from a type property to a short column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt16PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt32PropertyMapping">
            <summary>
            Represents the mapping from a type property to a int column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt32PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IInt64PropertyMapping">
            <summary>
            Represents the mapping from a type property to a long column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IInt64PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IMemberMapping">
            <summary>
            Represents the mapping from a type property/field to a column.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.Member">
            <summary>
            Gets the property/field that is mapped to.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.Reader">
            <summary>
            Gets a custom reader to use when populating entities.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.Writer">
            <summary>
            Gets a custom writer to use when writing entities.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.ColumnDefinition">
            <summary>
            Gets the column that is mapped to. 
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.PhysicalIndex">
            <summary>
            Gets the index of the column as it appears in the file.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.IMemberMapping.LogicalIndex">
            <summary>
            Gets the index of the column, excluding ignored columns.
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISBytePropertyMapping">
            <summary>
            Represents the mapping from a type property to a signed byte column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISBytePropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ISinglePropertyMapping">
            <summary>
            Represents the mapping from a type property to a float column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ISinglePropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IStringPropertyMapping">
            <summary>
            Represents the mapping from a type property to a string column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.Trim(System.Boolean)">
            <summary>
            Sets whether the value should be trimmed.
            </summary>
            <param name="trim">True if the parsed value should be trimmed -or- false, if the value should be returned without modification.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IStringPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ITimeSpanPropertyMapping">
            <summary>
            Represents the mapping from a type property to a TimeSpan column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.InputFormat(System.String)">
            <summary>
            Sets the date/time format the input is expected to be in.
            </summary>
            <param name="format">The format to expect.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the date/time format to use for output.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use when reading and writing date/times.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITimeSpanPropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.ITypedReader`1">
            <summary>
             Represents a reader that will generate entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being read.</typeparam>
        </member>
        <member name="E:FlatFiles.TypeMapping.ITypedReader`1.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.ITypedReader`1.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.ITypedReader`1.RecordParsed">
            <summary>
            Raised when a record is parsed.
            </summary>
        </member>
        <member name="P:FlatFiles.TypeMapping.ITypedReader`1.Reader">
            <summary>
            Gets the underlying reader.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.GetSchema">
            <summary>
            Gets the schema being used by the parser to parse record values.
            </summary>
            <returns>The schema being used by the parser.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.Read">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.ReadAsync">
            <summary>
            Reads the next record from the file.
            </summary>
            <returns>True if the next record was read; otherwise, false if the end of file was reached.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.Skip">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedReader`1.SkipAsync">
            <summary>
            Skips the next record from the file.
            </summary>
            <returns>True if the next record was skipped; otherwise, false if the end of the file was reached.</returns>
        </member>
        <member name="P:FlatFiles.TypeMapping.ITypedReader`1.Current">
            <summary>
            Gets the last read entity.
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.ITypedWriter`1">
            <summary>
            Represents a writer that will write entities.
            </summary>
            <typeparam name="TEntity">The type of the entity being written.</typeparam>
        </member>
        <member name="P:FlatFiles.TypeMapping.ITypedWriter`1.Writer">
            <summary>
            Gets the underlying writer.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.ITypedWriter`1.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.ITypedWriter`1.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.GetSchema">
            <summary>
            Gets the schema being used by the writer to write record values.
            </summary>
            <returns>The schema being used by the writer.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.WriteSchema">
            <summary>
            Write the textual representation of the record schema.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.WriteSchemaAsync">
            <summary>
            Write the textual representation of the record schema to the writer.
            </summary>
            <remarks>If the header or records have already been written, this call is ignored.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.Write(`0)">
            <summary>
            Writes the given entity to the underlying document.
            </summary>
            <param name="entity">The entity to write.</param>
        </member>
        <member name="M:FlatFiles.TypeMapping.ITypedWriter`1.WriteAsync(`0)">
            <summary>
            Writes the given entity to the underlying document.
            </summary>
            <param name="entity">The entity to write.</param>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt16PropertyMapping">
            <summary>
            Represents the mapping from a type property to an unsigned short column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt16PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt32PropertyMapping">
            <summary>
            Represents the mapping from a type property to an unsigned int column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt32PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="T:FlatFiles.TypeMapping.IUInt64PropertyMapping">
            <summary>
            Represents the mapping from a type property to a long column.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.ColumnName(System.String)">
            <summary>
            Sets the name of the column in the input or output file.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to use.
            </summary>
            <param name="provider">The provider to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles to expect when parsing the input.
            </summary>
            <param name="styles">The number styles used in the input.</param>
            <returns>The property mappig for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OutputFormat(System.String)">
            <summary>
            Sets the output format to use.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.NullFormatter(FlatFiles.INullFormatter)">
            <summary>
            Sets what value(s) are treated as null.
            </summary>
            <param name="formatter">The formatter to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause the default formatter to be used.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.DefaultValue(FlatFiles.IDefaultValue)">
            <summary>
            Sets the default value to use when a null is encountered on a non-null property.
            </summary>
            <param name="defaultValue">The default value to use.</param>
            <returns>The property mapping for further configuration.</returns>
            <remarks>Passing null will cause an exception to be thrown for unexpected nulls.</remarks>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.Preprocessor(System.Func{System.String,System.String})">
            <summary>
            Sets a function to preprocess in the input before parsing it.
            </summary>
            <param name="preprocessor">A preprocessor function.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OnParsing(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run before the input is parsed.
            </summary>
            <param name="handler">A function to call before the textual value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OnParsed(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run after the input is parsed.
            </summary>
            <param name="handler">A function to call after the value is parsed.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OnFormatting(System.Func{FlatFiles.IColumnContext,System.Object,System.Object})">
            <summary>
            Sets the function to run before the output is formatted as a string.
            </summary>1
            <param name="handler">A function to call before the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.IUInt64PropertyMapping.OnFormatted(System.Func{FlatFiles.IColumnContext,System.String,System.String})">
            <summary>
            Sets the function to run after the output is formatted as a string.
            </summary>
            <param name="handler">A function to call after the value is formatted as a string.</param>
            <returns>The property mapping for further configuration.</returns>
        </member>
        <member name="E:FlatFiles.TypeMapping.MultiplexingTypedWriter.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.MultiplexingTypedWriter.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.TypedReaderExtensions">
            <summary>
            Provides extension methods for working with typed readers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.TypedReaderExtensions.ReadAll``1(FlatFiles.TypeMapping.ITypedReader{``0})">
            <summary>
            Reads all of the entities from the typed reader.
            </summary>
            <typeparam name="TEntity">The type of the entity the reader is configured to read.</typeparam>
            <param name="reader">The reader to read the entities from.</param>
            <returns>The entities read by the reader.</returns>
            <remarks>This method only consumes records from the reader on-demand.</remarks>
        </member>
        <member name="E:FlatFiles.TypeMapping.TypedWriter`1.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.TypedWriter`1.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="T:FlatFiles.TypeMapping.TypedWriterExtensions">
            <summary>
            Provides extension methods for working with typed writers.
            </summary>
        </member>
        <member name="M:FlatFiles.TypeMapping.TypedWriterExtensions.WriteAll``1(FlatFiles.TypeMapping.ITypedWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes all of the entities to the typed writer.
            </summary>
            <typeparam name="TEntity">The type of the entity the writer is configured to write.</typeparam>
            <param name="writer">The reader to read the entities from.</param>
            <param name="entities">The entities to write to the file.</param>
            <returns>The entities written by the writer.</returns>
        </member>
        <member name="M:FlatFiles.TypeMapping.TypedWriterExtensions.WriteAllAsync``1(FlatFiles.TypeMapping.ITypedWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes all of the entities to the typed writer.
            </summary>
            <typeparam name="TEntity">The type of the entity the writer is configured to write.</typeparam>
            <param name="writer">The reader to read the entities from.</param>
            <param name="entities">The entities to write to the file.</param>
            <returns>The entities written by the writer.</returns>
        </member>
        <member name="E:FlatFiles.TypeMapping.UntypedWriter`1.ColumnError">
            <summary>
            Raised when an error occurs while processing a column.
            </summary>
        </member>
        <member name="E:FlatFiles.TypeMapping.UntypedWriter`1.RecordError">
            <summary>
            Raised when an error occurs while processing a record.
            </summary>
        </member>
        <member name="T:FlatFiles.UInt16Column">
            <summary>
            Represents a column containing unsigned 16-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt16Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an UInt16Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt16Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt16Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt16Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt16Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning an UInt16.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt16.</returns>
        </member>
        <member name="M:FlatFiles.UInt16Column.OnFormat(FlatFiles.IColumnContext,System.UInt16)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.UInt32Column">
            <inheritdoc />
            <summary>
            Represents a column containing unsigned 32-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt32Column.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of an UInt32Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt32Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt32Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt32Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt32Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <inheritdoc />
            <summary>
            Parses the given value, returning an UInt32.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt32.</returns>
        </member>
        <member name="M:FlatFiles.UInt32Column.OnFormat(FlatFiles.IColumnContext,System.UInt32)">
            <inheritdoc />
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.UInt64Column">
            <summary>
            Represents a column containing unsigned 64-bit integers.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt64Column.#ctor(System.String)">
            <summary>
            Initializes a new instance of an UInt64Column.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="P:FlatFiles.UInt64Column.FormatProvider">
            <summary>
            Gets or sets the format provider to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt64Column.NumberStyles">
            <summary>
            Gets or sets the number styles to use when parsing.
            </summary>
        </member>
        <member name="P:FlatFiles.UInt64Column.OutputFormat">
            <summary>
            Gets or sets the format string to use when converting the value to a string.
            </summary>
        </member>
        <member name="M:FlatFiles.UInt64Column.OnParse(FlatFiles.IColumnContext,System.String)">
            <summary>
            Parses the given value, returning an UInt64.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed UInt64.</returns>
        </member>
        <member name="M:FlatFiles.UInt64Column.OnFormat(FlatFiles.IColumnContext,System.UInt64)">
            <summary>
            Formats the given object.
            </summary>
            <param name="context">Holds information about the column current being processed.</param>
            <param name="value">The object to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:FlatFiles.Window">
            <summary>
            Defines the location and width of a column in a fixed-length record.
            </summary>
        </member>
        <member name="F:FlatFiles.Window.Trailing">
            <summary>
            Acts as an indicator that the column or property should capture any data
            at the end of a record, past the last window.
            </summary>
        </member>
        <member name="M:FlatFiles.Window.#ctor">
            <summary>
            Initializes a new instance of a Window representing the trailing data in a record.
            </summary>
        </member>
        <member name="M:FlatFiles.Window.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a Window.
            </summary>
            <param name="width">The maximum possible width of the column.</param>
        </member>
        <member name="P:FlatFiles.Window.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.Alignment">
            <summary>
            Gets or sets the alignment of the value in the column, using the value found in the FixedLengthOptions object by default.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.FillCharacter">
            <summary>
            Gets or sets the character that is used fill the column.
            </summary>
        </member>
        <member name="P:FlatFiles.Window.TruncationPolicy">
            <summary>
            Gets or sets the truncation policy in case there is an overflow.
            A null policy specifies that the default truncation policy of the writer will be used.
            </summary>
        </member>
        <member name="M:FlatFiles.Window.op_Implicit(System.Int32)~FlatFiles.Window">
            <summary>
            Implicitly creates a window from a width.
            </summary>
            <param name="width">The width to create a window for.</param>
            <returns>The new window.</returns>
        </member>
        <member name="T:FlatFiles.WindowCollection">
            <summary>
            Holds the column windows that make up a schema.
            </summary>
        </member>
        <member name="M:FlatFiles.WindowCollection.#ctor(System.Collections.Generic.List{FlatFiles.Window})">
            <summary>
            Initializes a new WindowCollection.
            </summary>
            <param name="windows">The windows making up the collection.</param>
        </member>
        <member name="P:FlatFiles.WindowCollection.Item(System.Int32)">
            <summary>
            Gets the window at the given index.
            </summary>
            <param name="index">The index of the window to get.</param>
            <returns>The window at the given index.</returns>
        </member>
        <member name="P:FlatFiles.WindowCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
        </member>
        <member name="M:FlatFiles.WindowCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the column definitions in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
    </members>
</doc>
